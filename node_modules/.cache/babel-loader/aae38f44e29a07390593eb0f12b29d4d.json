{"ast":null,"code":"'use strict';\n\nvar SignalingConstants = require('./cubeWebRTCSignalingConstants');\n\nvar ChatHelpers = require('../messaging/cubeChatInternalUtils');\n\nfunction WebRTCSignalingProcessor(service, delegate, connection) {\n  var self = this;\n  self.service = service;\n  self.delegate = delegate;\n  self.connection = connection;\n\n  this._onMessage = function (from, extraParams, delay, userId) {\n    var extension = self._getExtension(extraParams),\n        sessionId = extension.sessionID,\n        signalType = extension.signalType;\n    /** cleanup */\n\n\n    delete extension.moduleIdentifier;\n    delete extension.sessionID;\n    delete extension.signalType;\n\n    switch (signalType) {\n      case SignalingConstants.SignalingType.CALL:\n        if (typeof self.delegate._onCallListener === 'function') {\n          self.delegate._onCallListener(userId, sessionId, extension);\n        }\n\n        break;\n\n      case SignalingConstants.SignalingType.ACCEPT:\n        if (typeof self.delegate._onAcceptListener === 'function') {\n          self.delegate._onAcceptListener(userId, sessionId, extension);\n        }\n\n        break;\n\n      case SignalingConstants.SignalingType.REJECT:\n        if (typeof self.delegate._onRejectListener === 'function') {\n          self.delegate._onRejectListener(userId, sessionId, extension);\n        }\n\n        break;\n\n      case SignalingConstants.SignalingType.STOP:\n        if (typeof self.delegate._onStopListener === 'function') {\n          self.delegate._onStopListener(userId, sessionId, extension);\n        }\n\n        break;\n\n      case SignalingConstants.SignalingType.CANDIDATE:\n        if (typeof self.delegate._onIceCandidatesListener === 'function') {\n          self.delegate._onIceCandidatesListener(userId, sessionId, extension);\n        }\n\n        break;\n\n      case SignalingConstants.SignalingType.PARAMETERS_CHANGED:\n        if (typeof self.delegate._onUpdateListener === 'function') {\n          self.delegate._onUpdateListener(userId, sessionId, extension);\n        }\n\n        break;\n    }\n  };\n\n  this._getExtension = function (extraParams) {\n    if (!extraParams) {\n      return null;\n    }\n\n    var extension = {},\n        iceCandidates = [],\n        opponents = [],\n        candidate,\n        opponent,\n        childrenNodes;\n    var extraParamsChildNodes = extraParams.childNodes || extraParams.children;\n\n    for (var i = 0, len = extraParamsChildNodes.length; i < len; i++) {\n      var items = extraParamsChildNodes[i].childNodes || extraParamsChildNodes[i].children;\n      var itemTagName = extraParamsChildNodes[i].tagName || extraParamsChildNodes[i].name;\n\n      if (itemTagName === 'iceCandidates') {\n        /** iceCandidates */\n        for (var j = 0, len2 = items.length; j < len2; j++) {\n          candidate = {};\n          childrenNodes = items[j].childNodes || items[j].children;\n\n          for (var k = 0, len3 = childrenNodes.length; k < len3; k++) {\n            var childName = childrenNodes[k].tagName || childrenNodes[k].name;\n            var childValue = childrenNodes[k].textContent || childrenNodes[k].children[0];\n            candidate[childName] = childName === 'sdpMLineIndex' ? parseInt(childValue) : childValue;\n          }\n\n          iceCandidates.push(candidate);\n        }\n      } else if (itemTagName === 'opponentsIDs') {\n        /** opponentsIDs */\n        for (var v = 0, len2v = items.length; v < len2v; v++) {\n          opponent = items[v].textContent || items[v].children[0];\n          opponents.push(parseInt(opponent));\n        }\n      } else {\n        if (items.length > 1) {\n          var nodeTextContentSize = (extraParamsChildNodes[i].textContent || extraParamsChildNodes[i].children[0]).length;\n\n          if (nodeTextContentSize > 4096) {\n            var wholeNodeContent = \"\";\n\n            for (var t = 0; t < items.length; ++t) {\n              wholeNodeContent += items.textContent || items.children[0];\n            }\n\n            extension[itemTagName] = wholeNodeContent;\n          } else {\n            extension = ChatHelpers._XMLtoJS(extension, itemTagName, extraParamsChildNodes[i]);\n          }\n        } else {\n          if (extraParamsChildNodes[i].tagName === 'userInfo') {\n            extension = ChatHelpers._XMLtoJS(extension, itemTagName, extraParamsChildNodes[i]);\n          } else {\n            extension[itemTagName] = extraParamsChildNodes[i].textContent || extraParamsChildNodes[i].children[0];\n          }\n        }\n      }\n    }\n\n    if (iceCandidates.length > 0) {\n      extension.iceCandidates = iceCandidates;\n    }\n\n    if (opponents.length > 0) {\n      extension.opponentsIDs = opponents;\n    }\n\n    return extension;\n  };\n}\n\nmodule.exports = WebRTCSignalingProcessor;","map":null,"metadata":{},"sourceType":"script"}