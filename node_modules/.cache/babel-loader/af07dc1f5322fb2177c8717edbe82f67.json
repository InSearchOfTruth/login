{"ast":null,"code":"var config = require('./cubeConfig'),\n    Utils = require('./cubeUtils'); // The object for type MongoDB.Bson.ObjectId\n// http://docs.mongodb.org/manual/reference/object-id/\n\n\nvar ObjectId = {\n  machine: Math.floor(Math.random() * 16777216).toString(16),\n  pid: Math.floor(Math.random() * 32767).toString(16),\n  increment: 0\n};\nvar InternalUtils = {\n  getEnv: function getEnv() {\n    return Utils.getEnv();\n  },\n  isWebRTCAvailble: function isWebRTCAvailble() {\n    return Utils.isWebRTCAvailble();\n  },\n  safeCallbackCall: function safeCallbackCall() {\n    var listenerString = arguments[0].toString(),\n        listenerName = listenerString.split('(')[0].split(' ')[1],\n        argumentsCopy = [],\n        listenerCall;\n\n    for (var i = 0; i < arguments.length; i++) {\n      argumentsCopy.push(arguments[i]);\n    }\n\n    listenerCall = argumentsCopy.shift();\n\n    try {\n      listenerCall.apply(null, argumentsCopy);\n    } catch (err) {\n      if (listenerName === '') {\n        console.error('Error: ' + err);\n      } else {\n        console.error('Error in listener ' + listenerName + ': ' + err);\n      }\n    }\n  },\n  randomNonce: function randomNonce() {\n    return Math.floor(Math.random() * 10000);\n  },\n  unixTime: function unixTime() {\n    return Math.floor(Date.now() / 1000);\n  },\n  getUrl: function getUrl(base, id) {\n    var resource = id ? '/' + id : '';\n    return 'https://' + config.endpoints.api + '/' + base + resource + config.urls.type;\n  },\n  isArray: function isArray(arr) {\n    return Object.prototype.toString.call(arr) === '[object Array]';\n  },\n  isObject: function isObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  },\n  isFunction: function isFunction(func) {\n    return !!(func && func.constructor && func.call && func.apply);\n  },\n  // Generating BSON ObjectId and converting it to a 24 character string representation\n  // Changed from https://github.com/justaprogrammer/ObjectId.js/blob/master/src/main/javascript/Objectid.js\n  getBsonObjectId: function getBsonObjectId() {\n    var timestamp = this.unixTime().toString(16),\n        increment = (ObjectId.increment++).toString(16);\n    if (increment > 0xffffff) ObjectId.increment = 0;\n    return '00000000'.substr(0, 8 - timestamp.length) + timestamp + '000000'.substr(0, 6 - ObjectId.machine.length) + ObjectId.machine + '0000'.substr(0, 4 - ObjectId.pid.length) + ObjectId.pid + '000000'.substr(0, 6 - increment.length) + increment;\n  },\n  DLog: function DLog() {\n    var self = this;\n\n    if (self.loggers) {\n      for (var i = 0; i < self.loggers.length; ++i) {\n        self.loggers[i](arguments);\n      }\n\n      return;\n    }\n\n    var logger;\n    self.loggers = [];\n\n    var consoleLoggerFunction = function consoleLoggerFunction() {\n      var logger = function logger(args) {\n        console.log.apply(console, Array.prototype.slice.call(args));\n      };\n\n      return logger;\n    }; // Build loggers\n    // format \"debug: { }\"\n\n\n    if (typeof config.debug === 'object') {\n      if (typeof config.debug.mode === 'number') {\n        if (config.debug.mode == 1) {\n          logger = consoleLoggerFunction();\n          self.loggers.push(logger);\n        }\n      } else if (typeof config.debug.mode === 'object') {\n        config.debug.mode.forEach(function (mode) {\n          if (mode === 1) {\n            logger = consoleLoggerFunction();\n            self.loggers.push(logger);\n          }\n        });\n      } // format \"debug: true\"\n      // backward compatibility\n\n    } else if (typeof config.debug === 'boolean') {\n      if (config.debug) {\n        logger = consoleLoggerFunction();\n        self.loggers.push(logger);\n      }\n    }\n\n    if (self.loggers) {\n      for (var j = 0; j < self.loggers.length; ++j) {\n        self.loggers[j](arguments);\n      }\n    }\n  },\n  getError: function getError(code, detail, moduleName) {\n    var errorMsg = {\n      code: code,\n      status: 'error',\n      detail: detail\n    };\n\n    switch (code) {\n      case 401:\n        errorMsg.message = 'Unauthorized';\n        break;\n\n      case 403:\n        errorMsg.message = 'Forbidden';\n        break;\n\n      case 408:\n        errorMsg.message = 'Request Timeout';\n        break;\n\n      case 422:\n        errorMsg.message = 'Unprocessable Entity';\n        break;\n\n      case 502:\n        errorMsg.message = 'Bad Gateway';\n        break;\n\n      default:\n        errorMsg.message = 'Unknown error';\n        break;\n    }\n\n    this.DLog('[' + moduleName + ']', 'Error:', detail);\n    return errorMsg;\n  },\n  isExpiredSessionError: function isExpiredSessionError(error) {\n    try {\n      return error && error.code === 401 && error.message.errors.base[0] === 'Required session does not exist';\n    } catch (ex) {\n      return false;\n    }\n  },\n  MergeArrayOfObjects: function MergeArrayOfObjects(arrayTo, arrayFrom) {\n    var merged = JSON.parse(JSON.stringify(arrayTo));\n\n    firstLevel: for (var i = 0; i < arrayFrom.length; i++) {\n      var newItem = arrayFrom[i];\n\n      for (var j = 0; j < merged.length; j++) {\n        if (newItem.user_id === merged[j].user_id) {\n          merged[j] = newItem;\n          continue firstLevel;\n        }\n      }\n\n      merged.push(newItem);\n    }\n\n    return merged;\n  },\n  toBase64: function toBase64(str) {\n    if (this.getEnv().browser) {\n      return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n        return String.fromCharCode('0x' + p1);\n      }));\n    } else if (this.getEnv().reactnative) {\n      return global.btoa(str);\n    } else {\n      // Node.js & Native Script\n      return new Buffer(str).toString('base64');\n    }\n  }\n};\nmodule.exports = InternalUtils;","map":null,"metadata":{},"sourceType":"script"}