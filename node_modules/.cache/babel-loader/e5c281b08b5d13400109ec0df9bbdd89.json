{"ast":null,"code":"'use strict';\n\nvar Utils = require('../cubeInternalUtils'),\n    ChatUtils = require('./cubeChatInternalUtils');\n\nfunction StreamManagement() {\n  this._NS = 'urn:xmpp:sm:3';\n  this._isStreamManagementEnabled = false; // Counter of the incoming stanzas\n\n  this._clientProcessedStanzasCounter = null; // The client send stanza counter.\n\n  this._clientSentStanzasCounter = null;\n  this._timeInterval = 2000;\n  this.sentMessageCallback = null;\n\n  if (Utils.getEnv().browser) {\n    this._parser = new DOMParser();\n  } // connection\n\n\n  this._c = null; // Original connection.send method\n\n  this._originalSend = null; // In progress stanzas queue\n\n  this._stanzasQueue = [];\n}\n\nStreamManagement.prototype.enable = function (connection) {\n  var self = this,\n      stanza,\n      enableParams = {\n    xmlns: self._NS\n  };\n\n  if (!self._isStreamManagementEnabled) {\n    self._c = connection;\n    self._originalSend = this._c.send;\n    self._c.send = this.send.bind(self);\n  }\n\n  if (Utils.getEnv().browser) {\n    this._clientProcessedStanzasCounter = null;\n    this._clientSentStanzasCounter = null;\n  }\n\n  self._addEnableHandlers();\n\n  stanza = ChatUtils.createNonza('enable', enableParams);\n\n  self._c.send(stanza);\n};\n\nStreamManagement.prototype._timeoutCallback = function () {\n  var self = this,\n      now = Date.now(),\n      updatedStanzasQueue = [];\n\n  if (self._stanzasQueue.length) {\n    for (var i = 0; i < self._stanzasQueue.length; i++) {\n      if (self._stanzasQueue[i] && self._stanzasQueue[i].time < now) {\n        self.sentMessageCallback(self._stanzasQueue[i].message);\n      } else {\n        updatedStanzasQueue.push(self._stanzasQueue[i]);\n      }\n    }\n\n    self._stanzasQueue = updatedStanzasQueue;\n  }\n};\n\nStreamManagement.prototype._addEnableHandlers = function () {\n  var self = this;\n\n  if (Utils.getEnv().browser) {\n    self._c.XAddTrackedHandler(_incomingStanzaHandler.bind(self));\n  } else if (Utils.getEnv().reactnative) {\n    self._c.on('element', _incomingStanzaHandler.bind(self));\n  } else {\n    // Node.js & Native Script\n    self._c.on('stanza', _incomingStanzaHandler.bind(self));\n  }\n\n  function _incomingStanzaHandler(stanza) {\n    /*\n    * Getting incoming stanza tagName\n    * */\n    var tagName = stanza.name || stanza.tagName || stanza.nodeTree.tagName;\n\n    if (tagName === 'enabled') {\n      self._isStreamManagementEnabled = true;\n      setInterval(self._timeoutCallback.bind(self), self._timeInterval);\n      return true;\n    }\n\n    if (ChatUtils.getAttr(stanza, 'xmlns') !== self._NS) {\n      self._increaseReceivedStanzasCounter();\n    }\n\n    if (tagName === 'r') {\n      var params = {\n        xmlns: self._NS,\n        h: self._clientProcessedStanzasCounter\n      },\n          answerStanza = ChatUtils.createNonza('a', params);\n\n      self._originalSend.call(self._c, answerStanza);\n\n      return true;\n    }\n\n    if (tagName === 'a') {\n      var h = parseInt(ChatUtils.getAttr(stanza, 'h'));\n\n      self._checkCounterOnIncomeStanza(h);\n    }\n\n    return true;\n  }\n};\n\nStreamManagement.prototype.send = function (stanza, message) {\n  var self = this,\n      stanzaXML = stanza.nodeTree ? this._parser.parseFromString(stanza.nodeTree.outerHTML, \"application/xml\").childNodes[0] : stanza,\n      tagName = stanzaXML.name || stanzaXML.tagName || stanzaXML.nodeTree.tagName,\n      type = ChatUtils.getAttr(stanzaXML, 'type'),\n      bodyContent = ChatUtils.getElementText(stanzaXML, 'body') || '',\n      attachments = ChatUtils.getAllElements(stanzaXML, 'attachment') || '';\n\n  self._originalSend.call(self._c, stanza);\n\n  if (tagName === 'message' && (type === 'chat' || type === 'groupchat') && (bodyContent || attachments.length)) {\n    self._sendStanzasRequest({\n      message: message,\n      time: Date.now() + self._timeInterval,\n      expect: self._clientSentStanzasCounter\n    });\n  }\n\n  self._clientSentStanzasCounter++;\n};\n\nStreamManagement.prototype._sendStanzasRequest = function (data) {\n  var self = this;\n\n  if (self._isStreamManagementEnabled) {\n    self._stanzasQueue.push(data);\n\n    var stanza = ChatUtils.createNonza('r', {\n      xmlns: self._NS\n    });\n\n    self._originalSend.call(self._c, stanza);\n  }\n};\n\nStreamManagement.prototype.getClientSentStanzasCounter = function () {\n  return this._clientSentStanzasCounter;\n};\n\nStreamManagement.prototype._checkCounterOnIncomeStanza = function (count) {\n  if (this._stanzasQueue[0].expect !== count) {\n    this.sentMessageCallback(this._stanzasQueue[0].message);\n  } else {\n    this.sentMessageCallback(null, this._stanzasQueue[0].message);\n  }\n\n  this._stanzasQueue.shift();\n};\n\nStreamManagement.prototype._increaseReceivedStanzasCounter = function () {\n  this._clientProcessedStanzasCounter++;\n};\n\nmodule.exports = StreamManagement;","map":null,"metadata":{},"sourceType":"script"}