{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _classCallCheck = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar LtxParser = require('ltx/lib/parsers/ltx');\n\nvar Element = require('./Element');\n\nvar EventEmitter = require('events');\n\nvar XMLError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(XMLError, _Error);\n\n  function XMLError() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, XMLError);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(XMLError)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.name = 'XMLError';\n    return _this;\n  }\n\n  return XMLError;\n}(_wrapNativeSuper(Error));\n\nvar Parser =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(Parser, _EventEmitter);\n\n  function Parser() {\n    var _this2;\n\n    _classCallCheck(this, Parser);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Parser).call(this));\n    var parser = new LtxParser();\n    _this2.root = null;\n    _this2.cursor = null;\n    parser.on('startElement', _this2.onStartElement.bind(_assertThisInitialized(_assertThisInitialized(_this2))));\n    parser.on('endElement', _this2.onEndElement.bind(_assertThisInitialized(_assertThisInitialized(_this2))));\n    parser.on('text', _this2.onText.bind(_assertThisInitialized(_assertThisInitialized(_this2))));\n    _this2.parser = parser;\n    return _this2;\n  }\n\n  _createClass(Parser, [{\n    key: \"onStartElement\",\n    value: function onStartElement(name, attrs) {\n      var element = new Element(name, attrs);\n      var root = this.root,\n          cursor = this.cursor;\n\n      if (!root) {\n        this.root = element;\n        this.emit('start', element);\n      } else if (cursor !== root) {\n        cursor.append(element);\n      }\n\n      this.cursor = element;\n    }\n  }, {\n    key: \"onEndElement\",\n    value: function onEndElement(name) {\n      var root = this.root,\n          cursor = this.cursor;\n\n      if (name !== cursor.name) {\n        // <foo></bar>\n        this.emit('error', new XMLError(\"\".concat(cursor.name, \" must be closed.\")));\n        return;\n      }\n\n      if (cursor === root) {\n        this.emit('end', root);\n        return;\n      }\n\n      if (!cursor.parent) {\n        if (cursor.name.startsWith('stream:')) {\n          cursor.attrs['xmlns:stream'] = root.attrs['xmlns:stream'];\n        }\n\n        this.emit('element', cursor);\n        this.cursor = root;\n        return;\n      }\n\n      this.cursor = cursor.parent;\n    }\n  }, {\n    key: \"onText\",\n    value: function onText(str) {\n      var cursor = this.cursor;\n\n      if (!cursor) {\n        this.emit('error', new XMLError(\"\".concat(str, \" must be a child.\")));\n        return;\n      }\n\n      cursor.t(str);\n    }\n  }, {\n    key: \"write\",\n    value: function write(data) {\n      this.parser.write(data);\n    }\n  }, {\n    key: \"end\",\n    value: function end(data) {\n      if (data) {\n        this.parser.write(data);\n      }\n    }\n  }]);\n\n  return Parser;\n}(EventEmitter);\n\nParser.XMLError = XMLError;\nmodule.exports = Parser;","map":null,"metadata":{},"sourceType":"script"}