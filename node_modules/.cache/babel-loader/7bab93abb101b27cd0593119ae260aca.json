{"ast":null,"code":"'use strict';\n\nvar escaping = require('./escaping');\n/**\n * JID implements\n * - XMPP addresses according to RFC6122\n * - XEP-0106: JID Escaping\n *\n * @see http://tools.ietf.org/html/rfc6122#section-2\n * @see http://xmpp.org/extensions/xep-0106.html\n */\n\n\nfunction JID(a, b, c) {\n  this._local = null;\n  this.user = null; // DEPRECATED\n\n  this._domain = null;\n  this._resource = null;\n\n  if (a && !b && !c) {\n    this.parseJID(a);\n  } else if (b) {\n    this.setLocal(a);\n    this.setDomain(b);\n    this.setResource(c);\n  } else {\n    throw new Error('Argument error');\n  }\n}\n\nJID.prototype.parseJID = function (s) {\n  var resourceStart = s.indexOf('/');\n\n  if (resourceStart !== -1) {\n    this.setResource(s.substr(resourceStart + 1));\n    s = s.substr(0, resourceStart);\n  }\n\n  var atStart = s.indexOf('@');\n\n  if (atStart !== -1) {\n    this.setLocal(s.substr(0, atStart));\n    s = s.substr(atStart + 1);\n  }\n\n  this.setDomain(s);\n};\n\nJID.prototype.toString = function (unescape) {\n  var s = this._domain;\n  if (this._local) s = this.getLocal(unescape) + '@' + s;\n  if (this._resource) s = s + '/' + this._resource;\n  return s;\n};\n/**\n * Convenience method to distinguish users\n **/\n\n\nJID.prototype.bare = function () {\n  if (this._resource) {\n    return new JID(this._local, this._domain, null);\n  } else {\n    return this;\n  }\n};\n/**\n * Comparison function\n **/\n\n\nJID.prototype.equals = function (other) {\n  return this._local === other._local && this._domain === other._domain && this._resource === other._resource;\n};\n/**\n * http://xmpp.org/rfcs/rfc6122.html#addressing-localpart\n **/\n\n\nJID.prototype.setLocal = function (local, escape) {\n  escape = escape || escaping.detect(local);\n\n  if (escape) {\n    local = escaping.escape(local);\n  }\n\n  this._local = local && local.toLowerCase();\n  this.user = this._local;\n  return this;\n};\n\nJID.prototype.setUser = function () {\n  console.log('JID.setUser: Use JID.setLocal instead');\n  this.setLocal.apply(this, arguments);\n};\n\nJID.prototype.getUser = function () {\n  console.log('JID.getUser: Use JID.getLocal instead');\n  return this.getLocal.apply(this, arguments);\n};\n\nJID.prototype.getLocal = function (unescape) {\n  unescape = unescape || false;\n  var local = null;\n\n  if (unescape) {\n    local = escaping.unescape(this._local);\n  } else {\n    local = this._local;\n  }\n\n  return local;\n};\n\nObject.defineProperty(JID.prototype, 'local', {\n  get: JID.prototype.getLocal,\n  set: JID.prototype.setLocal\n});\n/**\n * http://xmpp.org/rfcs/rfc6122.html#addressing-domain\n */\n\nJID.prototype.setDomain = function (domain) {\n  this._domain = domain.toLowerCase();\n  return this;\n};\n\nJID.prototype.getDomain = function () {\n  return this._domain;\n};\n\nObject.defineProperty(JID.prototype, 'domain', {\n  get: JID.prototype.getDomain,\n  set: JID.prototype.setDomain\n});\n/**\n * http://xmpp.org/rfcs/rfc6122.html#addressing-resourcepart\n */\n\nJID.prototype.setResource = function (resource) {\n  this._resource = resource;\n  return this;\n};\n\nJID.prototype.getResource = function () {\n  return this._resource;\n};\n\nObject.defineProperty(JID.prototype, 'resource', {\n  get: JID.prototype.getResource,\n  set: JID.prototype.setResource\n});\nJID.prototype.detectEscape = escaping.detectEscape; // DEPRECATED\n\nJID.prototype.escapeLocal = escaping.escape; // DEPRECATED\n\nJID.prototype.unescapeLocal = escaping.unescape; // DEPRECATED\n\nmodule.exports = JID;","map":null,"metadata":{},"sourceType":"script"}