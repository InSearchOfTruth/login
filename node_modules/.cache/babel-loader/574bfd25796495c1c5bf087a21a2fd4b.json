{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar backoff = require('backoff');\n\nvar noop = function noop() {};\n\nmodule.exports = function (createConnection) {\n  return function (opts, onConnect) {\n    onConnect = 'function' == typeof opts ? opts : onConnect;\n    opts = 'object' == typeof opts ? opts : {\n      initialDelay: 1e3,\n      maxDelay: 30e3\n    };\n    if (!onConnect) onConnect = opts.onConnect;\n    var emitter = opts.emitter || new EventEmitter();\n    emitter.connected = false;\n    emitter.reconnect = true;\n    if (onConnect) emitter.on('connect', onConnect);\n    var backoffMethod = (backoff[opts.type] || backoff.fibonacci)(opts);\n    backoffMethod.on('backoff', function (n, d) {\n      emitter.emit('backoff', n, d);\n    });\n    var args;\n    var cleanup = noop;\n    backoffMethod.on('ready', attempt);\n\n    function attempt(n, delay) {\n      if (!emitter.reconnect) return;\n      cleanup();\n      emitter.emit('reconnect', n, delay);\n      var con = createConnection.apply(null, args);\n      if (con !== emitter._connection) emitter.emit('connection', con);\n      emitter._connection = con;\n      cleanup = onCleanup;\n\n      function onCleanup(err) {\n        cleanup = noop;\n        con.removeListener('connect', connect);\n        con.removeListener('error', onDisconnect);\n        con.removeListener('close', onDisconnect);\n        con.removeListener('end', onDisconnect); //hack to make http not crash.\n        //HTTP IS THE WORST PROTOCOL.\n\n        if (con.constructor.name == 'Request') con.on('error', noop);\n      }\n\n      function onDisconnect(err) {\n        emitter.connected = false;\n        onCleanup(err); //emit disconnect before checking reconnect, so user has a chance to decide not to.\n\n        emitter.emit('disconnect', err);\n        if (!emitter.reconnect) return;\n\n        try {\n          backoffMethod.backoff();\n        } catch (_) {}\n      }\n\n      function connect() {\n        backoffMethod.reset();\n        emitter.connected = true;\n        if (onConnect) con.removeListener('connect', onConnect);\n        emitter.emit('connect', con);\n      }\n\n      con.on('error', onDisconnect).on('close', onDisconnect).on('end', onDisconnect);\n\n      if (opts.immediate || con.constructor.name == 'Request') {\n        emitter.connected = true;\n        emitter.emit('connect', con);\n        con.once('data', function () {\n          //this is the only way to know for sure that data is coming...\n          backoffMethod.reset();\n        });\n      } else {\n        con.on('connect', connect);\n      }\n    }\n\n    emitter.connect = emitter.listen = function () {\n      this.reconnect = true;\n      backoffMethod.reset();\n      args = [].slice.call(arguments);\n      attempt(0, 0);\n      return emitter;\n    }; //force reconnection\n\n\n    emitter.end = emitter.disconnect = function () {\n      emitter.reconnect = false;\n      if (emitter._connection) emitter._connection.end();\n      emitter.emit('disconnect');\n      return emitter;\n    };\n\n    return emitter;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}