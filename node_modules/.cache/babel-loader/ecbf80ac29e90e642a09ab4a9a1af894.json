{"ast":null,"code":"/*\n * Copyright (c) 2012 Mathieu Turcotte\n * Licensed under the MIT license.\n */\nvar events = require('events');\n\nvar util = require('util');\n/**\n * Backoff driver.\n * @param backoffStrategy Backoff delay generator/strategy.\n * @constructor\n */\n\n\nfunction Backoff(backoffStrategy) {\n  events.EventEmitter.call(this);\n  this.backoffStrategy_ = backoffStrategy;\n  this.maxNumberOfRetry_ = -1;\n  this.backoffNumber_ = 0;\n  this.backoffDelay_ = 0;\n  this.timeoutID_ = -1;\n  this.handlers = {\n    backoff: this.onBackoff_.bind(this)\n  };\n}\n\nutil.inherits(Backoff, events.EventEmitter);\n/**\n * Sets a limit, greater than 0, on the maximum number of backoffs. A 'fail'\n * event will be emitted when the limit is reached.\n * @param maxNumberOfRetry The maximum number of backoffs.\n */\n\nBackoff.prototype.failAfter = function (maxNumberOfRetry) {\n  if (maxNumberOfRetry < 1) {\n    throw new Error('Maximum number of retry must be greater than 0. ' + 'Actual: ' + maxNumberOfRetry);\n  }\n\n  this.maxNumberOfRetry_ = maxNumberOfRetry;\n};\n/**\n * Starts a backoff operation.\n * @param err Optional paramater to let the listeners know why the backoff\n *     operation was started.\n */\n\n\nBackoff.prototype.backoff = function (err) {\n  if (this.timeoutID_ !== -1) {\n    throw new Error('Backoff in progress.');\n  }\n\n  if (this.backoffNumber_ === this.maxNumberOfRetry_) {\n    this.emit('fail', err);\n    this.reset();\n  } else {\n    this.backoffDelay_ = this.backoffStrategy_.next();\n    this.timeoutID_ = setTimeout(this.handlers.backoff, this.backoffDelay_);\n    this.emit('backoff', this.backoffNumber_, this.backoffDelay_, err);\n  }\n};\n/**\n * Handles the backoff timeout completion.\n * @private\n */\n\n\nBackoff.prototype.onBackoff_ = function () {\n  this.timeoutID_ = -1;\n  this.emit('ready', this.backoffNumber_, this.backoffDelay_);\n  this.backoffNumber_++;\n};\n/**\n * Stops any backoff operation and resets the backoff delay to its inital\n * value.\n */\n\n\nBackoff.prototype.reset = function () {\n  this.backoffNumber_ = 0;\n  this.backoffStrategy_.reset();\n  clearTimeout(this.timeoutID_);\n  this.timeoutID_ = -1;\n};\n\nmodule.exports = Backoff;","map":null,"metadata":{},"sourceType":"script"}