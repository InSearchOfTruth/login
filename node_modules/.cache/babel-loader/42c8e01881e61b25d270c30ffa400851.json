{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar inherits = require('inherits');\n\nvar Element = require('./Element');\n\nvar LtxParser = require('./parsers/ltx');\n\nvar Parser = function Parser(options) {\n  EventEmitter.call(this);\n  var ParserInterface = this.Parser = options && options.Parser || this.DefaultParser;\n  var ElementInterface = this.Element = options && options.Element || this.DefaultElement;\n  this.parser = new ParserInterface();\n  var el;\n  var self = this;\n  this.parser.on('startElement', function (name, attrs) {\n    var child = new ElementInterface(name, attrs);\n\n    if (!el) {\n      el = child;\n    } else {\n      el = el.cnode(child);\n    }\n  });\n  this.parser.on('endElement', function (name) {\n    if (!el) {\n      /* Err */\n    } else if (name === el.name) {\n      if (el.parent) {\n        el = el.parent;\n      } else if (!self.tree) {\n        self.tree = el;\n        el = undefined;\n      }\n    }\n  });\n  this.parser.on('text', function (str) {\n    if (el) {\n      el.t(str);\n    }\n  });\n  this.parser.on('error', function (e) {\n    self.error = e;\n    self.emit('error', e);\n  });\n};\n\ninherits(Parser, EventEmitter);\nParser.prototype.DefaultParser = LtxParser;\nParser.prototype.DefaultElement = Element;\n\nParser.prototype.write = function (data) {\n  this.parser.write(data);\n};\n\nParser.prototype.end = function (data) {\n  this.parser.end(data);\n\n  if (!this.error) {\n    if (this.tree) {\n      this.emit('tree', this.tree);\n    } else {\n      this.emit('error', new Error('Incomplete document'));\n    }\n  }\n};\n\nmodule.exports = Parser;","map":null,"metadata":{},"sourceType":"script"}