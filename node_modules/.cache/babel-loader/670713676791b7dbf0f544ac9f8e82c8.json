{"ast":null,"code":"var Config = require('../cubeConfig'),\n    Utils = require('../cubeInternalUtils');\n\nvar MESSAGES_API_URL = Config.urls.chat + '/Message';\n\nfunction MessageProxy(service) {\n  this.service = service;\n}\n\nMessageProxy.prototype = {\n  /**\n   * get a chat history\n   * @memberof CB.chat.message\n   * @param {Object} params - Object of parameters.\n   * @param {listMessageCallback} callback - The callback function.\n   * */\n  list: function list(params, callback) {\n    /**\n     * Callback for CB.chat.message.list()\n     * @param {Object} error - The error object\n     * @param {Object} messages - The messages object.\n     * @callback listMessageCallback\n     * */\n    var ajaxParams = {\n      url: Utils.getUrl(MESSAGES_API_URL),\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * Create message.\n   * @memberof CB.chat.message\n   * @param {Object} params - Object of parameters.\n   * @param {createMessageCallback} callback - The callback function.\n   * */\n  create: function create(params, callback) {\n    /**\n     * Callback for CB.chat.message.create()\n     * @param {Object} error - The error object\n     * @param {Object} messages - The message object.\n     * @callback createMessageCallback\n     * */\n    var ajaxParams = {\n      url: Utils.getUrl(MESSAGES_API_URL),\n      type: 'POST',\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * Update message.\n   * @memberof CB.chat.message\n   * @param {String} id - The message id.\n   * @param {Object} params - Object of parameters\n   * @param {Number} [params.read] - Mark message as read (read=1)\n   * @param {Number} [params.delivered] - Mark message as delivered (delivered=1)\n   * @param {String} [params.message] - The message's text\n   * @param {updateMessageCallback} callback - The callback function\n   * */\n  update: function update(id, params, callback) {\n    /**\n     * Callback for CB.chat.message.update()\n     * @param {Object} error - The error object\n     * @param {Object} response - Empty body.\n     * @callback updateMessageCallback\n     * */\n    var ajaxParams = {\n      type: 'PUT',\n      dataType: 'text',\n      url: Utils.getUrl(MESSAGES_API_URL, id),\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * Delete message.\n   * @memberof CB.chat.message\n   * @param {String} id - The message id.\n   * @param {Object} params - Object of parameters.\n   * @param {deleteMessageCallback} callback - The callback function.\n   * */\n  delete: function _delete(id, params_or_callback, callback) {\n    /**\n     * Callback for CB.chat.message.delete()\n     * @param {Object} error - The error object.\n     * @param {String} res - Empty string.\n     * @callback deleteMessageCallback\n     * */\n    var ajaxParams = {\n      url: Utils.getUrl(MESSAGES_API_URL, id),\n      type: 'DELETE',\n      dataType: 'text'\n    };\n\n    if (arguments.length === 2) {\n      this.service.ajax(ajaxParams, params_or_callback);\n    } else if (arguments.length === 3) {\n      ajaxParams.data = params_or_callback;\n      this.service.ajax(ajaxParams, callback);\n    }\n  },\n\n  /**\n   * Get unread messages counter for one or group of dialogs.\n   * @memberof CB.chat.message\n   * @param {Object} params - Object of parameters.\n   * @param {unreadCountMessageCallback} callback - The callback function.\n   * */\n  unreadCount: function unreadCount(params, callback) {\n    /**\n     * Callback for CB.chat.message.unreadCount()\n     * @param {Object} error - The error object.\n     * @param {Object} res - The requested dialogs Object.\n     * @callback unreadCountMessageCallback\n     * */\n    if (params && params.chat_dialog_ids && Utils.isArray(params.chat_dialog_ids)) {\n      params.chat_dialog_ids = params.chat_dialog_ids.join(', ');\n    }\n\n    var ajaxParams = {\n      url: Utils.getUrl(MESSAGES_API_URL + '/unread'),\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  }\n};\nmodule.exports = MessageProxy;","map":null,"metadata":{},"sourceType":"script"}