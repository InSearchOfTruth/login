{"ast":null,"code":"'use strict';\n\nvar Utils = require('../cubeInternalUtils'),\n    Config = require('../cubeConfig'),\n    XMPP = require('../cubeDependencies').XMPPClient,\n    ERR_UNKNOWN_INTERFACE = 'Unknown interface. SDK support browser / node env.',\n    MARKERS = {\n  CLIENT: 'jabber:client',\n  CHAT: 'urn:xmpp:chat-markers:0',\n  STATES: 'http://jabber.org/protocol/chatstates',\n  MARKERS: 'urn:xmpp:chat-markers:0',\n  CARBONS: 'urn:xmpp:carbons:2',\n  ROSTER: 'jabber:iq:roster',\n  MUC: 'http://jabber.org/protocol/muc',\n  PRIVACY: 'jabber:iq:privacy',\n  LAST: 'jabber:iq:last'\n};\n\nvar cbChatHelpers = {\n  MARKERS: MARKERS,\n\n  /**\n   * @param {params} this object may contains Jid or Id property\n   * @return {string} jid of user\n   */\n  buildUserJid: function buildUserJid(params) {\n    var jid;\n\n    if ('userId' in params) {\n      jid = params.userId + '-' + Config.creds.appId + '@' + Config.endpoints.chat;\n\n      if ('resource' in params) {\n        jid = jid + '/' + params.resource;\n      }\n    } else if ('jid' in params) {\n      jid = params.jid;\n    }\n\n    return jid;\n  },\n  buildUserJidLocalPart: function buildUserJidLocalPart(userId) {\n    return userId + '-' + Config.creds.appId;\n  },\n  createMessageStanza: function createMessageStanza(params) {\n    if (Utils.getEnv().browser) {\n      return $msg(params);\n    } else if (Utils.getEnv().reactnative) {\n      return XMPP.xml('message', params);\n    } else {\n      // Node.js & Native Script\n      return new XMPP.Stanza('message', params);\n    }\n  },\n  createIqStanza: function createIqStanza(params) {\n    if (Utils.getEnv().browser) {\n      return $iq(params);\n    } else if (Utils.getEnv().reactnative) {\n      return XMPP.xml('iq', params);\n    } else {\n      // Node.js & Native Script\n      return new XMPP.Stanza('iq', params);\n    }\n  },\n  createPresenceStanza: function createPresenceStanza(params) {\n    if (Utils.getEnv().browser) {\n      return $pres(params);\n    } else if (Utils.getEnv().reactnative) {\n      return XMPP.xml('presence', params);\n    } else {\n      // Node.js & Native Script\n      return new XMPP.Stanza('presence', params);\n    }\n  },\n  createNonza: function createNonza(elementName, params) {\n    if (Utils.getEnv().browser) {\n      return $build(elementName, params);\n    } else if (Utils.getEnv().reactnative) {\n      return XMPP.xml(elementName, params);\n    } else {\n      // Node.js & Native Script\n      return new XMPP.Stanza(elementName, params);\n    }\n  },\n  getAttr: function getAttr(el, attrName) {\n    var attr;\n\n    if (!el) {\n      return null;\n    }\n\n    if (typeof el.getAttribute === 'function') {\n      attr = el.getAttribute(attrName);\n    } else if (el.attrs) {\n      attr = el.attrs[attrName];\n    }\n\n    return attr ? attr : null;\n  },\n  getElement: function getElement(stanza, elName) {\n    var el;\n\n    if (typeof stanza.querySelector === 'function') {\n      el = stanza.querySelector(elName);\n    } else if (typeof stanza.getChild === 'function') {\n      el = stanza.getChild(elName);\n    } else {\n      throw ERR_UNKNOWN_INTERFACE;\n    }\n\n    return el ? el : null;\n  },\n  getAllElements: function getAllElements(stanza, elName) {\n    var el;\n\n    if (typeof stanza.querySelectorAll === 'function') {\n      el = stanza.querySelectorAll(elName);\n    } else if (typeof stanza.getChild === 'function') {\n      el = stanza.getChild(elName);\n    } else {\n      throw ERR_UNKNOWN_INTERFACE;\n    }\n\n    return el ? el : null;\n  },\n  getElementText: function getElementText(stanza, elName) {\n    var el, txt;\n\n    if (typeof stanza.querySelector === 'function') {\n      el = stanza.querySelector(elName);\n      txt = el ? el.textContent : null;\n    } else if (typeof stanza.getChildText === 'function') {\n      txt = stanza.getChildText(elName);\n    } else {\n      throw ERR_UNKNOWN_INTERFACE;\n    }\n\n    return txt ? txt : null;\n  },\n  _JStoXML: function _JStoXML(title, obj, msg) {\n    var self = this;\n    msg.c(title);\n    Object.keys(obj).forEach(function (field) {\n      if (typeof obj[field] === 'object') {\n        self._JStoXML(field, obj[field], msg);\n      } else {\n        msg.c(field).t(obj[field]).up();\n      }\n    });\n    msg.up();\n  },\n  _XMLtoJS: function _XMLtoJS(extension, title, obj) {\n    var self = this;\n    extension[title] = {};\n\n    for (var i = 0, len = obj.childNodes.length; i < len; i++) {\n      if (obj.childNodes[i].childNodes.length > 1) {\n        extension[title] = self._XMLtoJS(extension[title], obj.childNodes[i].tagName, obj.childNodes[i]);\n      } else {\n        extension[title][obj.childNodes[i].tagName] = obj.childNodes[i].textContent;\n      }\n    }\n\n    return extension;\n  },\n  filledExtraParams: function filledExtraParams(stanza, extension) {\n    var helper = this;\n    Object.keys(extension).forEach(function (field) {\n      if (field === 'attachments') {\n        extension[field].forEach(function (attach) {\n          if (Utils.getEnv().browser) {\n            stanza.c('attachment', attach).up();\n          } else {\n            stanza.getChild('extraParams').c('attachment', attach).up();\n          }\n        });\n      } else if (typeof extension[field] === 'object') {\n        helper._JStoXML(field, extension[field], stanza);\n      } else {\n        if (Utils.getEnv().browser) {\n          stanza.c(field).t(extension[field]).up();\n        } else {\n          stanza.getChild('extraParams').c(field).t(extension[field]).up();\n        }\n      }\n    });\n    stanza.up();\n    return stanza;\n  },\n  parseExtraParams: function parseExtraParams(extraParams) {\n    var self = this;\n\n    if (!extraParams) {\n      return null;\n    }\n\n    var extension = {};\n    var dialogId, attach, attributes;\n    var attachments = [];\n\n    if (Utils.getEnv().browser) {\n      for (var i = 0, len = extraParams.childNodes.length; i < len; i++) {\n        // parse attachments\n        if (extraParams.childNodes[i].tagName === 'attachment') {\n          attach = {};\n          attributes = extraParams.childNodes[i].attributes;\n\n          for (var j = 0, len2 = attributes.length; j < len2; j++) {\n            if (attributes[j].name === 'size') {\n              attach[attributes[j].name] = parseInt(attributes[j].value);\n            } else {\n              attach[attributes[j].name] = attributes[j].value;\n            }\n          }\n\n          attachments.push(attach); // parse 'dialog_id'\n        } else if (extraParams.childNodes[i].tagName === 'dialog_id') {\n          dialogId = extraParams.childNodes[i].textContent;\n          extension.dialog_id = dialogId; // parse other user's custom parameters\n        } else {\n          if (extraParams.childNodes[i].childNodes.length > 1) {\n            // Firefox issue with 4K XML node limit:\n            // http://www.coderholic.com/firefox-4k-xml-node-limit/\n            var nodeTextContentSize = extraParams.childNodes[i].textContent.length;\n\n            if (nodeTextContentSize > 4096) {\n              var wholeNodeContent = '';\n\n              for (var k = 0; k < extraParams.childNodes[i].childNodes.length; ++k) {\n                wholeNodeContent += extraParams.childNodes[i].childNodes[k].textContent;\n              }\n\n              extension[extraParams.childNodes[i].tagName] = wholeNodeContent;\n            } else {\n              extension = self._XMLtoJS(extension, extraParams.childNodes[i].tagName, extraParams.childNodes[i]);\n            }\n          } else {\n            extension[extraParams.childNodes[i].tagName] = extraParams.childNodes[i].textContent;\n          }\n        }\n      }\n    } else {\n      for (var c = 0, lenght = extraParams.children.length; c < lenght; c++) {\n        if (extraParams.children[c].name === 'attachment') {\n          attach = {};\n          attributes = extraParams.children[c].attrs;\n          var attrKeys = Object.keys(attributes);\n\n          for (var l = 0; l < attrKeys.length; l++) {\n            if (attrKeys[l] === 'size') {\n              attach.size = parseInt(attributes.size);\n            } else {\n              attach[attrKeys[l]] = attributes[attrKeys[l]];\n            }\n          }\n\n          attachments.push(attach);\n        } else if (extraParams.children[c].name === 'dialog_id') {\n          dialogId = extraParams.getChildText('dialog_id');\n          extension.dialog_id = dialogId;\n        }\n\n        if (extraParams.children[c].children.length === 1) {\n          var child = extraParams.children[c];\n          extension[child.name] = child.children[0];\n        }\n      }\n    }\n\n    if (attachments.length > 0) {\n      extension.attachments = attachments;\n    }\n\n    if (extension.moduleIdentifier) {\n      delete extension.moduleIdentifier;\n    }\n\n    return {\n      extension: extension,\n      dialogId: dialogId\n    };\n  },\n  getUniqueId: function getUniqueId(suffix) {\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n\n    if (typeof suffix == 'string' || typeof suffix == 'number') {\n      return uuid + ':' + suffix;\n    } else {\n      return uuid + '';\n    }\n  },\n  getErrorFromXMLNode: function getErrorFromXMLNode(stanzaError) {\n    var errorElement = this.getElement(stanzaError, 'error');\n    var errorCode = parseInt(this.getAttr(errorElement, 'code'));\n    var errorText = this.getElementText(errorElement, 'text');\n    return Utils.getError(errorCode, errorText);\n  }\n};\nmodule.exports = cbChatHelpers;","map":null,"metadata":{},"sourceType":"script"}