{"ast":null,"code":"var config = require('./cubeConfig'),\n    Utils = require('./cubeInternalUtils');\n\nfunction StorageProxy(service) {\n  this.service = service;\n}\n\nStorageProxy.prototype = {\n  /**\n   * Get a list of files for current user.\n   * @memberof CB.storage\n   * @param {object} params - Object of parameters\n   * @param {number} [params.page=1] - Used to paginate the results when more than one page of files retrieved\n   * @param {number} [params.per_page=10] - The maximum number of files to return per page, if not specified then the default is 10\n   * @param {listOfFilesCallback} callback - The listOfFilesCallback function\n   */\n  list: function list(params, callback) {\n    /**\n     * Callback for CB.storage.list(params, callback)\n     * @callback listOfFilesCallback\n     * @param {object} error - The error object\n     * @param {object} response - Object with Array of files\n     */\n    if (typeof params === 'function' && typeof callback === 'undefined') {\n      callback = params;\n      params = null;\n    }\n\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.blobs),\n      data: params,\n      type: 'GET'\n    };\n    this.service.ajax(ajaxParams, function (err, result) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(err, result);\n      }\n    });\n  },\n\n  /**\n   * Create new file object.\n   * @private\n   * @memberof CB.storage\n   * @param {object} params - Object of parameters\n   * @param {string} params.content_type - The file's mime ({@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types content type})\n   * @param {string} params.name - The file's name\n   * @param {boolean} [params.public=false] - The file's visibility. public means it will be possible to access this file without session token provided. Default is 'false'\n   * @param {createFileCallback} callback - The createFileCallback function\n   */\n  create: function create(params, callback) {\n    /**\n     * Callback for CB.storage.create(params, callback)\n     * @callback createFileCallback\n     * @param {object} error - The error object\n     * @param {object} response - The file object (blob-object-access)\n     */\n    var ajaxParams = {\n      type: 'POST',\n      data: {\n        blob: params\n      },\n      url: Utils.getUrl(config.urls.blobs)\n    };\n    this.service.ajax(ajaxParams, function (err, result) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(err, result.blob);\n      }\n    });\n  },\n\n  /**\n   * Delete file by id.\n   * @memberof CB.storage\n   * @param {Number} id - blob_id\n   * @param {deleteFileCallback} callback - The deleteFileCallback function.\n   */\n  delete: function _delete(id, callback) {\n    /**\n     * Callback for CB.storage.delete(id, callback)\n     * @callback deleteFileCallback\n     * @param {object} error - The error object\n     * @param {object} response - Boolean\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.blobs, id),\n      type: 'DELETE',\n      dataType: 'text'\n    };\n    this.service.ajax(ajaxParams, function (err, result) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, true);\n      }\n    });\n  },\n\n  /**\n   * Create file > upload file > mark file as uploaded > return result.\n   * @memberof CB.storage\n   * @param {object} params - Object of parameters\n   * @param {object} params.file - File object\n   * @param {string} params.name - The file's name\n   * @param {string} params.type - The file's mime ({@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types content type})\n   * @param {number} params.size - Size of file, in bytes\n   * @param {boolean} [params.public=false] - The file's visibility. public means it will be possible to access this file without session token provided. Default is 'false'\n   * @param {createAndUploadFileCallback} callback - The createAndUploadFileCallback function\n   */\n  createAndUpload: function createAndUpload(params, callback) {\n    /**\n     * Callback for CB.storage.createAndUpload(params, callback).\n     * @callback createAndUploadFileCallback\n     * @param {object} error - The error object\n     * @param {object} response - The file object (blob-object-access)\n     */\n    var self = this;\n    var createParams = {},\n        file,\n        name,\n        type,\n        size,\n        fileId;\n    var clonedParams = JSON.parse(JSON.stringify(params));\n    clonedParams.file.data = '...';\n    file = params.file;\n    name = params.name || file.name;\n    type = params.type || file.type;\n    size = params.size || file.size;\n    createParams.name = name;\n    createParams.content_type = type;\n\n    if (params.public) {\n      createParams.public = params.public;\n    }\n\n    if (params.tag_list) {\n      createParams.tag_list = params.tag_list;\n    } // Create a file object\n\n\n    this.create(createParams, function (err, createResult) {\n      if (err) {\n        callback(err, null);\n      } else {\n        var uri = parseUri(createResult.blob_object_access.params),\n            uploadUrl = uri.protocol + '://' + uri.authority + uri.path;\n        var ajaxParams = {\n          url: uploadUrl\n        },\n            data = {};\n        fileId = createResult.id;\n        createResult.size = size;\n        Object.keys(uri.queryKey).forEach(function (val) {\n          data[val] = decodeURIComponent(uri.queryKey[val]);\n        });\n        data.file = file;\n        ajaxParams.data = data; // Upload the file to Amazon S3\n\n        self.upload(ajaxParams, function (err, result) {\n          if (err) {\n            callback(err, null);\n          } else {\n            var _ajaxParams = {\n              id: fileId,\n              size: size\n            }; // Mark file as uploaded\n\n            self.markUploaded(_ajaxParams, function (err, result) {\n              if (err) {\n                callback(err, null);\n              } else {\n                callback(null, createResult);\n              }\n            });\n          }\n        });\n      }\n    });\n  },\n\n  /**\n   * Upload a file to cloud storage.\n   * @private\n   * @memberof CB.storage\n   * @param {Object} params - Object of parameters (see into source code of CB.storage.createAndUpload(params, callback) to know how to prepare the params object)\n   * @param {string} params.url - location url\n   * @param {object} params.data - formed data with file\n   * @param {uploadFileCallback} callback - The uploadFileCallback function\n   */\n  upload: function upload(params, callback) {\n    /**\n     * Callback for CB.storage.upload(params, callback)\n     * @callback uploadFileCallback\n     * @param {object} error - The error object\n     * @param {object} response - The empty object\n     */\n    var ajaxParams = {\n      type: 'POST',\n      dataType: 'text',\n      contentType: false,\n      url: params.url,\n      data: params.data\n    };\n    this.service.ajax(ajaxParams, function (err, xmlDoc) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, {});\n      }\n    });\n  },\n\n  /**\n   * Declare file uploaded. The file's 'status' field will be set to 'complete'.\n   * @private\n   * @memberof CB.storage\n   * @param {object} params - Object of parameters\n   * @param {number} params.blob_id - The id of file to declare as uploaded\n   * @param {number} params.size - Size of file, in bytes\n   * @param {markUploadedFileCallback} callback - The markUploadedFileCallback function\n   */\n  markUploaded: function markUploaded(params, callback) {\n    /**\n     * Callback for CB.storage.markUploaded(params, callback)\n     * @callback markUploadedFileCallback\n     * @param {object} error - The error object\n     * @param {object} response - The empty body\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.blobs, params.id + '/complete'),\n      type: 'PUT',\n      data: {\n        size: params.size\n      },\n      dataType: 'text'\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, res);\n      }\n    });\n  },\n\n  /**\n   * Retrieve file object by id.\n   * @memberof CB.storage\n   * @param {number} id - The id of file to declare as uploaded\n   * @param {getFileInfoByIdCallback} callback - The getFileInfoByIdCallback function return file's object.\n   */\n  getInfo: function getInfo(id, callback) {\n    /**\n     * Callback for CB.storage.getInfo(id, callback)\n     * @callback getFileInfoByIdCallback\n     * @param {object} error - The error object\n     * @param {object} response - The file object (blob-object-access)\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.blobs, id)\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, res);\n      }\n    });\n  },\n\n  /**\n   * Download file by UID. If the file is public then it's possible to download it without a session token.\n   * @memberof CB.storage\n   * @param {String} uid - The uid of file to declare as uploaded\n   * @param {downloadFileByUIDCallback} callback - The downloadFileByUIDCallback function\n   */\n  getFile: function getFile(uid, callback) {\n    /**\n     * Callback for CB.storage.getFile(uid, callback)\n     * @callback downloadFileByUIDCallback\n     * @param {object} error - The error object\n     * @param {object} response - The file object\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.blobs, uid)\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, res);\n      }\n    });\n  },\n\n  /**\n   * Edit a file by ID.\n   * @memberof CB.storage\n   * @param {object} params - Object of parameters\n   * @param {number} params.id - The id of file to declare as uploaded\n   * @param {string} [params.name] - New file name\n   * @param {updateFileCallback} callback - The updateFileCallback function\n   */\n  update: function update(params, callback) {\n    /**\n     * Callback for CB.storage.update(uid, callback)\n     * @callback updateFileCallback\n     * @param {object} error - The error object\n     * @param {object} response - The file object (blob-object-access)\n     */\n    var data = {};\n    data.blob = {};\n\n    if (typeof params.name !== 'undefined') {\n      data.blob.name = params.name;\n    }\n\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.blobs, params.id),\n      data: data\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, res);\n      }\n    });\n  },\n\n  /**\n   * Get private URL for file download by file_uid (blob_uid).\n   * @memberof CB.storage\n   * @param {String} fileUID - The uid of file to declare as uploaded\n   */\n  privateUrl: function privateUrl(fileUID) {\n    return 'https://' + config.endpoints.api + '/blobs/' + fileUID + '?token=' + this.service.getSession().token;\n  },\n\n  /**\n   * Get public URL for file download by file_uid (blob_uid).\n   * @memberof CB.storage\n   * @param {String} fileUID - The uid of file to declare as uploaded\n   */\n  publicUrl: function publicUrl(fileUID) {\n    return 'https://' + config.endpoints.api + '/blobs/' + fileUID;\n  }\n};\nmodule.exports = StorageProxy; // parseUri 1.2.2\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\n// http://blog.stevenlevithan.com/archives/parseuri\n\nfunction parseUri(str) {\n  var o = parseUri.options,\n      m = o.parser[o.strictMode ? 'strict' : 'loose'].exec(str);\n  var uri = {},\n      i = 14;\n\n  while (i--) {\n    uri[o.key[i]] = m[i] || '';\n  }\n\n  uri[o.q.name] = {};\n  uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {\n    if ($1) {\n      uri[o.q.name][$1] = $2;\n    }\n  });\n  return uri;\n}\n\nparseUri.options = {\n  strictMode: false,\n  key: ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'],\n  q: {\n    name: 'queryKey',\n    parser: /(?:^|&)([^&=]*)=?([^&]*)/g\n  },\n  parser: {\n    strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n    loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\n  }\n};","map":null,"metadata":{},"sourceType":"script"}