{"ast":null,"code":"var config = require('./cubeConfig');\n\nfunction ConnectyCube() {}\n\nConnectyCube.prototype = {\n  /**\n   * Return current version of ConnectyCube JS SDK\n   * @memberof ConnectyCube\n   * */\n  version: config.version,\n\n  /**\n   * @memberof ConnectyCube\n   * @param {Object} credentials - A map with App credentials.\n   * @param {Object} configMap - A map with SDK configs.\n   */\n  init: function init(credentials, configMap) {\n    if (configMap && typeof configMap === 'object') {\n      config.set(configMap);\n    }\n    /** include dependencies */\n\n\n    var Proxy = require('./cubeProxy'),\n        Auth = require('./cubeAuth'),\n        Users = require('./cubeUsers'),\n        Storage = require('./cubeStorage'),\n        PushNotifications = require('./cubePushNotifications'),\n        Data = require('./cubeData'),\n        AddressBook = require('./cubeAddressBook'),\n        Chat = require('./messaging/cubeChat'),\n        DialogProxy = require('./messaging/cubeDialog'),\n        MessageProxy = require('./messaging/cubeMessage'),\n        Utils = require('./cubeUtils');\n\n    this.service = new Proxy();\n    this.auth = new Auth(this.service);\n    this.users = new Users(this.service);\n    this.storage = new Storage(this.service);\n    this.pushnotifications = new PushNotifications(this.service);\n    this.data = new Data(this.service);\n    this.addressbook = new AddressBook(this.service);\n    this.chat = new Chat(this.service);\n    this.chat.dialog = new DialogProxy(this.service);\n    this.chat.message = new MessageProxy(this.service);\n    this.utils = Utils; // add WebRTC API if API is avaible\n\n    if (Utils.isWebRTCAvailble()) {\n      // p2p calls client\n      var WebRTCClient = require('./videocalling/cubeWebRTCClient');\n\n      this.videochat = new WebRTCClient(this.service, this.chat.xmppClient);\n      this.chat.webrtcSignalingProcessor = this.videochat.signalingProcessor; // conf calls client\n\n      this.videochatconference = require('./videocalling_conference/cubeVideoCallingConference');\n    } else {\n      this.videochat = false;\n      this.videochatconference = false;\n    } // Initialization by outside token\n\n\n    if (credentials.token) {\n      config.creds.appId = credentials.appId;\n      this.service.setSession({\n        token: credentials.token\n      });\n    } else {\n      config.creds.appId = credentials.appId;\n      config.creds.authKey = credentials.authKey;\n      config.creds.authSecret = credentials.authSecret;\n    }\n  },\n\n  /**\n   * Retrieve current session\n   * @memberof ConnectyCube\n   * @param {getSessionCallback} callback - The getSessionCallback function.\n   * */\n  getSession: function getSession(callback) {\n    /**\n     * This callback return return error or session object.\n     * @callback getSessionCallback\n     * @param {Object} error - The error object\n     * @param {Object} session - Contains of session object\n     * */\n    this.auth.getSession(callback);\n  },\n\n  /**\n   * Creat new session.\n   * @memberof ConnectyCube\n   * @param {Object} params Parameters.\n   * @param {createSessionCallback} callback -\n   * */\n  createSession: function createSession(params, callback) {\n    /**\n     * This callback return error or session object.\n     * @callback createSessionCallback\n     * @param {Object} error - The error object\n     * @param {Object} session - Contains of session object\n     * */\n    this.auth.createSession(params, callback);\n  },\n\n  /**\n   * Destroy current session.\n   * @memberof ConnectyCube\n   * @param {destroySessionCallback} callback - The destroySessionCallback function.\n   * */\n  destroySession: function destroySession(callback) {\n    /**\n     * This callback returns error or null.\n     * @callback destroySessionCallback\n     * @param {Object | Null} error - The error object if got en error and null if success.\n     * */\n    this.auth.destroySession(callback);\n  },\n\n  /**\n   * Create web session.\n   * @memberof ConnectyCube\n   * @param {Object} params - Params object with the web session settings.\n   * @param {createWebSessionCallback} callback - The createWebSessionCallback function.\n   * */\n  createWebSession: function createWebSession(params, callback) {\n    /**\n     * This callback return error or SVG with QR code.\n     * @callback createWebSessionCallback\n     * @param {Object} params - Params object for create web session.\n     * @param {number} [params.long=0] - Used to set web session lifetime (\"0\" - 2 hours, \"1\" - 30 days).\n     * @param {Object | Null} error - The error object if got en error and null if success.\n     * @param {Null | String} qr_code - The QR code's XML string if everything goes well and null on error.\n     * */\n    this.auth.createWebSession(params, callback);\n  },\n\n  /**\n   * Check the web session state and wait until a user_id field is upgraded.\n   * A common flow here is when a mobile phone scans a QR code and then upgrade a Web session token with its user_id.\n   * @memberof ConnectyCube\n   * @param {checkWebSessionUntilUpgradeCallback} callback - The checkWebSessionUntilUpgradeCallback function.\n   * @returns {Number} - The timer's ID.\n   * */\n  checkWebSessionUntilUpgrade: function checkWebSessionUntilUpgrade(callback) {\n    /**\n     * This callback return error or updated web session.\n     * @callback checkWebSessionUntilUpgradeCallback\n     * @param {Object | Null} error - The timeout error object and null if success.\n     * @param {Null | Object} session - The upgraded session object if everything goes well and null on error.\n     * */\n    return this.auth.checkWebSessionUntilUpgrade(callback);\n  },\n\n  /**\n   * Upgrade the web session.\n   * @memberof ConnectyCube\n   * @param {upgradeWebSessionCallback} callback - The upgradeWebSessionCallback function.\n   * */\n  upgradeWebSession: function upgradeWebSession(webToken, callback) {\n    /**\n     * This callback return error or null.\n     * @callback upgradeWebSessionCallback\n     * @param {Object | Null} error - The error object if got en error and null if success.\n     * */\n    this.auth.upgradeWebSession(webToken, callback);\n  },\n\n  /**\n   * User login.\n   * @memberof ConnectyCube\n   * @param {Object} params - Params object for login into the session.\n   * @param {loginCallback} callback - The loginCallback function.\n   * */\n  login: function login(params, callback) {\n    /**\n     * This callback return error or user Object.\n     * @callback loginCallback\n     * @param {Object | Null} error - The error object if got en error and null if success.\n     * @param {Null | Object} result - User data object if everything goes well and null on error.\n     * */\n    this.auth.login(params, callback);\n  },\n\n  /**\n   * User logout.\n   * @memberof ConnectyCube\n   * @param {logoutCallback} callback - The logoutCallback function.\n   * */\n  logout: function logout(callback) {\n    /**\n     * This callback return error or null.\n     * @callback logoutCallback\n     * @param {Object | Null} error - The error object if got en error and null if success.\n     * */\n    this.auth.logout(callback);\n  }\n};\n/**\n * @namespace\n */\n\nvar CB = new ConnectyCube();\nCB.ConnectyCube = ConnectyCube;\nmodule.exports = CB;","map":null,"metadata":{},"sourceType":"script"}