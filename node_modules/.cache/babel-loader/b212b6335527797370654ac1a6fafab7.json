{"ast":null,"code":"var config = require('./cubeConfig'),\n    Utils = require('./cubeInternalUtils');\n\nvar DATE_FIELDS = ['created_at', 'updated_at', 'last_request_at'];\nvar NUMBER_FIELDS = ['id', 'external_user_id'];\nvar resetPasswordUrl = config.urls.users + '/password/reset';\n\nfunction UsersProxy(service) {\n  this.service = service;\n}\n\nUsersProxy.prototype = {\n  /**\n   * Retrieve a specific user or users\n   * @memberof CB.users\n   * @param {(number|object)} params - A (number) or object of parameters (object with one of next required properties)\n   * @param {string} params.login - The login of the user to be retrieved.\n   * @param {string} params.full_name - The full name of users to be retrieved.\n   * @param {string} params.facebook_id - The user's facebook uid.\n   * @param {string} params.twitter_id - The user's twitter uid.\n   * @param {string} params.phone - The user's phone number\n   * @param {string} params.email - The user's email address.\n   * @param {(string|string[])} params.tags - A comma separated list of tags associated with users.\n   * @param {(number|string)} params.external - An uid that represents the user in an external user registry.\n   * @param {string} [params.page=1] - Used to paginate the results when more than one page of users retrieved (can be used with get by 'full_name' or 'tags')\n   * @param {string} [params.per_page=10] - The maximum number of users to return per page, if not specified then the default is 10 (can be used with get by 'full_name' or 'tags')\n   * @param {getUsersCallback} callback - The getUsersCallback function\n   */\n  get: function get(params, callback) {\n    /**\n     * Callback for CB.users.get(params, callback)\n     * @callback getUsersCallback\n     * @param {object} error - The error object\n     * @param {object} response - The user object or object with Array of users\n     */\n    var url,\n        filters = [],\n        item;\n\n    if (params.order) {\n      params.order = generateOrder(params.order);\n    }\n\n    if (params && params.filter) {\n      if (Utils.isArray(params.filter)) {\n        params.filter.forEach(function (el) {\n          item = generateFilter(el);\n          filters.push(item);\n        });\n      } else {\n        item = generateFilter(params.filter);\n        filters.push(item);\n      }\n\n      params.filter = filters;\n    }\n\n    if (typeof params === 'number') {\n      url = params;\n      params = {};\n    } else {\n      if (params.login) {\n        url = 'by_login';\n      } else if (params.full_name) {\n        url = 'by_full_name';\n      } else if (params.facebook_id) {\n        url = 'by_facebook_id';\n      } else if (params.twitter_id) {\n        url = 'by_twitter_id';\n      } else if (params.phone) {\n        url = 'phone';\n      } else if (params.email) {\n        url = 'by_email';\n      } else if (params.tags) {\n        url = 'by_tags';\n      } else if (params.external) {\n        url = 'external/' + params.external;\n        params = {};\n      }\n    }\n\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.users, url),\n      data: params\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, res.user || res);\n      }\n    });\n  },\n\n  /**\n   * Registers a new app user. Call this API to register a user for the app. You must provide either a user login or email address along with their password, passing both email address and login is permitted but not required.\n   * @memberof CB.users\n   * @param {object} params - object of user's parameters\n   * @param {string} params.login - The user's login name\n   * @param {string} params.password - The user's password for this app\n   * @param {string} params.email - The user's email address\n   * @param {string} [params.full_name] - The user's full name\n   * @param {string} [params.phone] - The user's phone number\n   * @param {string} [params.website] - The user's web address, or other url\n   * @param {string} [params.facebook_id] - The user's facebook uid\n   * @param {string} [params.twitter_id] - The user's twitter uid\n   * @param {number} [params.blob_id] - The id of an associated blob for this user, for example their photo\n   * @param {(number|string)} [params.external_user_id] - An uid that represents the user in an external user registry\n   * @param {(string|string[])} [params.tag_list] - A comma separated list of tags associated with the user. Set up user tags and address them separately in your app\n   * @param {string} [params.custom_data] - The user's additional info\n   * @param {createUserCallback} callback - The createUserCallback function\n   */\n  signup: function signup(params, callback) {\n    /**\n     * Callback for CB.users.signup(params, callback)\n     * @callback createUserCallback\n     * @param {object} error - The error object\n     * @param {object} response - The user object\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.users),\n      type: 'POST',\n      data: {\n        user: params\n      }\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, res.user);\n      }\n    });\n  },\n\n  /**\n   * Update current user. In normal usage, nobody except the user is allowed to modify their own data. Any fields you don’t specify will remain unchanged, so you can update just a subset of the user’s data. login/email and password may be changed, but the new login/email must not already be in use.\n   * @memberof CB.users\n   * @param {object} params - object of user's parameters\n   * @param {string} [params.login] - The user's login name\n   * @param {string} [params.old_password] - The user's old password for this app\n   * @param {string} [params.password] - The user's new password for this app\n   * @param {string} [params.email] - The user's email address\n   * @param {string} [params.full_name] - The user's full name\n   * @param {string} [params.phone] - The user's phone number\n   * @param {string} [params.website] - The user's web address, or other url\n   * @param {string} [params.facebook_id] - The user's facebook uid\n   * @param {string} [params.twitter_id] - The user's twitter uid\n   * @param {number} [params.blob_id] - The id of an associated blob for this user, for example their photo\n   * @param {(number|string)} [params.external_user_id] - An uid that represents the user in an external user registry\n   * @param {(string|string[])} [params.tag_list] - A comma separated list of tags associated with the user. Set up user tags and address them separately in your app\n   * @param {string} [params.custom_data] - The user's additional info\n   * @param {updateUserCallback} callback - The updateUserCallback function\n   */\n  update: function update(params, callback) {\n    /**\n     * Callback for CB.users.update(params, callback)\n     * @callback updateUserCallback\n     * @param {object} error - The error object\n     * @param {object} response - The user object\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.users, this.service.getCurrentUserId()),\n      type: 'PUT',\n      data: {\n        user: params\n      }\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, res.user);\n      }\n    });\n  },\n\n  /**\n   * Remove a user from the app.\n   * @memberof CB.users\n   * @param {deleteUserCallback} callback - An uid that represents the user in an external user registry\n   */\n  delete: function _delete(callback) {\n    /**\n     * Callback for CB.users.delete(callback)\n     * @callback deleteUserCallback\n     * @param {object} error - The error object\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.users, this.service.getCurrentUserId()),\n      type: 'DELETE',\n      dataType: 'text'\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * You can initiate password resets for users who have emails associated with their account. Password reset instruction will be sent to this email address\n   * @memberof CB.users\n   * @param {string} email - The user's email to send reset password instruction\n   * @param {resetPasswordByEmailCallback} callback - The resetPasswordByEmailCallback function\n   */\n  resetPassword: function resetPassword(email, callback) {\n    /**\n     * Callback for CB.users.resetPassword(email, callback)\n     * @callback resetPasswordByEmailCallback\n     * @param {object} error - The error object\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(resetPasswordUrl),\n      data: {\n        email: email\n      },\n      dataType: 'text'\n    };\n    this.service.ajax(ajaxParams, callback);\n  }\n};\nmodule.exports = UsersProxy;\n/* Private\n---------------------------------------------------------------------- */\n\nfunction generateFilter(obj) {\n  var type = obj.field in DATE_FIELDS ? 'date' : typeof obj.value;\n\n  if (Utils.isArray(obj.value)) {\n    if (type === 'object') {\n      type = typeof obj.value[0];\n    }\n\n    obj.value = obj.value.toString();\n  }\n\n  return [type, obj.field, obj.param, obj.value].join(' ');\n}\n\nfunction generateOrder(obj) {\n  var type = obj.field in DATE_FIELDS ? 'date' : obj.field in NUMBER_FIELDS ? 'number' : 'string';\n  return [obj.sort, type, obj.field].join(' ');\n}","map":null,"metadata":{},"sourceType":"script"}