{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar XMPPError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(XMPPError, _Error);\n\n  function XMPPError(condition, text, application) {\n    var _this;\n\n    _classCallCheck(this, XMPPError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(XMPPError).call(this, condition + (text ? \" - \".concat(text) : '')));\n    _this.name = 'XMPPError';\n    _this.condition = condition;\n    _this.text = text;\n    _this.application = application;\n    return _this;\n  }\n\n  _createClass(XMPPError, null, [{\n    key: \"fromElement\",\n    value: function fromElement(element) {\n      var _element$children = _slicedToArray(element.children, 3),\n          condition = _element$children[0],\n          second = _element$children[1],\n          third = _element$children[2];\n\n      var text;\n      var application;\n\n      if (second) {\n        if (second.is('text')) {\n          text = second;\n        } else if (second) {\n          application = second;\n        }\n\n        if (third) application = third;\n      }\n\n      var error = new this(condition.name, text ? text.text() : '', application);\n      error.element = element;\n      return error;\n    }\n  }]);\n\n  return XMPPError;\n}(_wrapNativeSuper(Error));\n\nmodule.exports = XMPPError;","map":null,"metadata":{},"sourceType":"script"}