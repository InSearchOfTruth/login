{"ast":null,"code":"var config = require('./cubeConfig'),\n    Utils = require('./cubeInternalUtils');\n\nfunction DataProxy(service) {\n  this.service = service;\n}\n\nDataProxy.prototype = {\n  /**\n   * Create new custom object.\n   *\n   * @memberof CB.data\n   *\n   * @param {string} className - A class name to which a new object belongs\n   * @param {object} data - Object of parameters (custom fields' names and their values)\n   * @param {createDataCallback} callback - The createDataCallback function\n   */\n  create: function create(className, data, callback) {\n    /**\n     * Callback for CB.data.create(className, data, callback)\n     * @callback createDataCallback\n     * @param {object} error - The error object\n     * @param {object} response - An object\n     */\n    var ajaxParams = {\n      type: 'POST',\n      data: data,\n      isNeedStringify: true,\n      contentType: 'application/json; charset=utf-8',\n      url: Utils.getUrl(config.urls.data, className)\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(err, res);\n      }\n    });\n  },\n\n  /**\n   * Search for records of particular class.\n   *\n   * @memberof CB.data\n   *\n   * @param {string} className - A class name to which a new record belongs\n   * @param {(object|string[])} filters - Search records with field which contains exactly specified value or by array of records' ids to retrieve\n   * @param {number} [filters.skip=0] - Skip N records in search results. Useful for pagination. Default (if not specified) - 0\n   * @param {number} [filters.limit=100] - Limit search results to N records. Useful for pagination. Default and max values - 100. If limit is equal to -1 only last record will be returned\n   * @param {string} [filters.*] - filters\n   * @param {listOfDataCallback} callback - The listOfDataCallback function\n   */\n  list: function list(className, filters, callback) {\n    /**\n     * Callback for CB.data.list(className, filters, callback)\n     * @callback listOfDataCallback\n     * @param {object} error - The error object\n     * @param {object} response - Object with Array of files\n     */\n    // make filters an optional parameter\n    if (typeof callback === 'undefined' && typeof filters === 'function') {\n      callback = filters;\n      filters = null;\n    }\n\n    this.service.ajax({\n      url: Utils.getUrl(config.urls.data, className),\n      data: filters\n    }, function (err, result) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(err, result);\n      }\n    });\n  },\n\n  /**\n   * Update record by ID of particular class.\n   * @memberof CB.data\n   * @param {string} className - A class name of record\n   * @param {object} data - Object of parameters\n   * @param {string} data._id - An ID of record to update\n   * @param {updateDataCallback} callback - The updateDataCallback function\n   */\n  update: function update(className, data, callback) {\n    /**\n     * Callback for CB.data.update(className, data, callback)\n     * @callback updateDataCallback\n     * @param {object} error - The error object\n     * @param {object} response - An object\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.data, className + '/' + data._id),\n      type: 'PUT',\n      contentType: 'application/json; charset=utf-8',\n      isNeedStringify: true,\n      data: data\n    };\n    this.service.ajax(ajaxParams, function (err, result) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(err, result);\n      }\n    });\n  },\n\n  /**\n   * Delete record / records by ID, IDs or criteria (filters) of particular class. <br />\n   *\n   * @memberof CB.data\n   *\n   * @param {string} className - A class name of record\n   * @param {(string|array|object)} requestedData - An ID of record or an array of record's ids or object of criteria rules to delete\n   * @param {deletedDataCallback} callback - The deletedDataCallback function\n   *\n   */\n  delete: function _delete(className, requestedData, callback) {\n    /**\n     * Callback for CB.data.delete(className, requestedData, callback)\n     * @callback deletedDataCallback\n     * @param {object} error - The error object\n     * @param {object|null} response\n     * @param {array} response.deleted - Array of ids of deleted records. If you delete BY CRITERIA this property will be null.\n     * @param {number} response.deletedCount - count of deleted records.\n     */\n    var typesData = {\n      id: 1,\n      ids: 2,\n      criteria: 3\n    };\n    var requestedTypeOf;\n    var responceNormalized = {\n      deleted: [],\n      deletedCount: 0\n    };\n    var ajaxParams = {\n      type: 'DELETE',\n      dataType: 'text'\n    };\n    /** Define what type of data passed by client */\n\n    if (typeof requestedData === 'string') {\n      requestedTypeOf = typesData.id;\n    } else if (Utils.isArray(requestedData)) {\n      requestedTypeOf = typesData.ids;\n    } else if (Utils.isObject(requestedData)) {\n      requestedTypeOf = typesData.criteria;\n    }\n\n    if (requestedTypeOf === typesData.id) {\n      ajaxParams.url = Utils.getUrl(config.urls.data, className + '/' + requestedData);\n    } else if (requestedTypeOf === typesData.ids) {\n      ajaxParams.url = Utils.getUrl(config.urls.data, className + '/' + requestedData.toString());\n    } else if (requestedTypeOf === typesData.criteria) {\n      ajaxParams.url = Utils.getUrl(config.urls.data, className + '/by_criteria');\n      ajaxParams.data = requestedData;\n    }\n\n    function handleDeleteCO(error, result) {\n      if (error) {\n        callback(error, null);\n      } else {\n        var response;\n\n        if (requestedTypeOf === typesData.id) {\n          responceNormalized.deleted.push(requestedData);\n          responceNormalized.deletedCount = responceNormalized.deleted.length;\n        } else if (requestedTypeOf === typesData.ids) {\n          response = JSON.parse(result);\n          responceNormalized.deleted = response.SuccessfullyDeleted.ids.slice(0);\n          responceNormalized.deletedCount = responceNormalized.deleted.length;\n        } else if (requestedTypeOf === typesData.criteria) {\n          response = JSON.parse(result);\n          responceNormalized.deleted = null;\n          responceNormalized.deletedCount = response.total_deleted;\n        }\n\n        callback(error, responceNormalized);\n      }\n    }\n\n    this.service.ajax(ajaxParams, handleDeleteCO);\n  },\n\n  /**\n   * Upload file to file field.\n   * @memberof CB.data\n   * @param {string} className - A class name to which a new object belongs\n   * @param {object} params - Object of parameters\n   * @param {string} [params.field_name] - The file's field name\n   * @param {string} [params.name] - The file's name\n   * @param {object} [params.file] - File object\n   * @param {uploadFileToDataCallback} callback - The uploadFileToDataCallback function\n   */\n  uploadFile: function uploadFile(className, params, callback) {\n    /**\n     * Callback for CB.data.uploadFile(className, params, callback)\n     * @callback uploadFileToDataCallback\n     * @param {object} error - The error object\n     * @param {object} response - The file object\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.data, className + '/' + params.id + '/file'),\n      type: 'POST',\n      fileToCustomObject: true,\n      contentType: false,\n      data: {\n        field_name: params.field_name,\n        file: {\n          data: params.file,\n          name: params.name\n        }\n      }\n    };\n    this.service.ajax(ajaxParams, function (err, result) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(err, result);\n      }\n    });\n  },\n\n  /**\n   * Download file from file field by ID.\n   * @memberof CB.data\n   * @param {string} className - A class name of record\n   * @param {object} params - Object of parameters\n   * @param {string} params.field_name - The file's field name\n   * @param {string} params.id - The record's ID\n   * @param {downloadFileFromDataCallback} callback - The downloadFileFromDataCallback function\n   */\n  downloadFile: function downloadFile(className, params, callback) {\n    /**\n     * Callback for CB.data.downloadFile(className, params, callback)\n     * @callback downloadFileFromDataCallback\n     * @param {object} error - The error object\n     * @param {object} response - The file object\n     */\n    var result = this.fileUrl(className, params);\n    callback(null, result);\n  },\n\n  /**\n   * Return file's URL from file field by ID\n   * @memberof CB.data\n   * @param {string} className - A class name of record\n   * @param {object} params - Object of parameters\n   * @param {string} params.field_name - The file's field name\n   * @param {string} params.id - The record's ID\n   */\n  fileUrl: function fileUrl(className, params) {\n    var result = Utils.getUrl(config.urls.data, className + '/' + params.id + '/file');\n    result += '?field_name=' + params.field_name + '&token=' + this.service.getSession().token;\n    return result;\n  },\n\n  /**\n   * Delete file from file field by ID\n   * @memberof CB.data\n   * @param {string} className - A class name of record\n   * @param {object} params - Object of parameters\n   * @param {string} params.field_name - The file's field name\n   * @param {string} params.id - The record's ID\n   * @param {deleteFileFromDataCallback} callback - The deleteFileFromDataCallback function\n   */\n  deleteFile: function deleteFile(className, params, callback) {\n    /**\n     * Callback for CB.data.deleteFile(className, params, callback)\n     * @callback deleteFileFromDataCallback\n     * @param {object} error - The error object\n     * @param {object} response - Empty body\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.data, className + '/' + params.id + '/file'),\n      data: {\n        field_name: params.field_name\n      },\n      dataType: 'text',\n      type: 'DELETE'\n    };\n    this.service.ajax(ajaxParams, function (err, result) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(err, true);\n      }\n    });\n  }\n};\nmodule.exports = DataProxy;","map":null,"metadata":{},"sourceType":"script"}