{"ast":null,"code":"/*\n * Copyright (c) 2012 Mathieu Turcotte\n * Licensed under the MIT license.\n */\nvar Backoff = require('./lib/backoff');\n\nvar ExponentialBackoffStrategy = require('./lib/strategy/exponential');\n\nvar FibonacciBackoffStrategy = require('./lib/strategy/fibonacci');\n\nvar FunctionCall = require('./lib/function_call.js');\n\nmodule.exports.Backoff = Backoff;\nmodule.exports.FunctionCall = FunctionCall;\nmodule.exports.FibonacciStrategy = FibonacciBackoffStrategy;\nmodule.exports.ExponentialStrategy = ExponentialBackoffStrategy;\n/**\n * Constructs a Fibonacci backoff.\n * @param options Fibonacci backoff strategy arguments.\n * @return The fibonacci backoff.\n * @see FibonacciBackoffStrategy\n */\n\nmodule.exports.fibonacci = function (options) {\n  return new Backoff(new FibonacciBackoffStrategy(options));\n};\n/**\n * Constructs an exponential backoff.\n * @param options Exponential strategy arguments.\n * @return The exponential backoff.\n * @see ExponentialBackoffStrategy\n */\n\n\nmodule.exports.exponential = function (options) {\n  return new Backoff(new ExponentialBackoffStrategy(options));\n};\n/**\n * Constructs a FunctionCall for the given function and arguments.\n * @param fn The function to wrap in a backoff handler.\n * @param vargs The function's arguments (var args).\n * @param callback The function's callback.\n * @return The FunctionCall instance.\n */\n\n\nmodule.exports.call = function (fn, vargs, callback) {\n  var args = Array.prototype.slice.call(arguments);\n  fn = args[0];\n  vargs = args.slice(1, args.length - 1);\n  callback = args[args.length - 1];\n  return new FunctionCall(fn, vargs, callback);\n};","map":null,"metadata":{},"sourceType":"script"}