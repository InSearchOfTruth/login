{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar WS = require('ws');\n\nvar WebSocket = global.WebSocket || WS;\n\nvar EventEmitter = require('events');\n\nvar CODE = 'ECONNERROR';\n\nvar Socket =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(Socket, _EventEmitter);\n\n  function Socket() {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Socket).call(this));\n    _this.listeners = Object.create(null);\n    return _this;\n  }\n\n  _createClass(Socket, [{\n    key: \"connect\",\n    value: function connect(url) {\n      this.url = url;\n\n      this._attachSocket(new WebSocket(url, ['xmpp']));\n    }\n  }, {\n    key: \"_attachSocket\",\n    value: function _attachSocket(socket) {\n      var _this2 = this;\n\n      var sock = this.socket = socket;\n      var listeners = this.listeners;\n\n      listeners.open = function () {\n        _this2.emit('connect');\n      };\n\n      listeners.message = function (_ref) {\n        var data = _ref.data;\n        return _this2.emit('data', data);\n      };\n\n      listeners.error = function (event) {\n        // WS\n        var error = event.error; // DOM\n\n        if (!error) {\n          error = new Error(\"WebSocket \".concat(CODE, \" \").concat(_this2.url));\n          error.errno = CODE;\n          error.code = CODE;\n        }\n\n        error.event = event;\n        error.url = _this2.url;\n\n        _this2.emit('error', error);\n      };\n\n      listeners.close = function (event) {\n        _this2._detachSocket();\n\n        _this2.emit('close', !event.wasClean, event);\n      };\n\n      sock.addEventListener('open', listeners.open);\n      sock.addEventListener('message', listeners.message);\n      sock.addEventListener('error', listeners.error);\n      sock.addEventListener('close', listeners.close);\n    }\n  }, {\n    key: \"_detachSocket\",\n    value: function _detachSocket() {\n      delete this.url;\n      var socket = this.socket,\n          listeners = this.listeners;\n      Object.getOwnPropertyNames(listeners).forEach(function (k) {\n        socket.removeEventListener(k, listeners[k]);\n        delete listeners[k];\n      });\n      delete this.socket;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.socket.close();\n    }\n  }, {\n    key: \"write\",\n    value: function write(data, fn) {\n      if (WebSocket === WS) {\n        this.socket.send(data, fn);\n      } else {\n        this.socket.send(data);\n        fn();\n      }\n    }\n  }]);\n\n  return Socket;\n}(EventEmitter);\n\nmodule.exports = Socket;","map":null,"metadata":{},"sourceType":"script"}