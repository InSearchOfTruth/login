{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _require = require('@xmpp/events'),\n    EventEmitter = _require.EventEmitter;\n\nvar Reconnect =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(Reconnect, _EventEmitter);\n\n  function Reconnect(entity) {\n    var _this;\n\n    _classCallCheck(this, Reconnect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Reconnect).call(this));\n    _this.delay = 1000;\n    _this.entity = entity;\n    _this._timeout = null;\n    return _this;\n  }\n\n  _createClass(Reconnect, [{\n    key: \"scheduleReconnect\",\n    value: function scheduleReconnect() {\n      var _this2 = this;\n\n      var entity = this.entity,\n          delay = this.delay,\n          _timeout = this._timeout;\n      clearTimeout(_timeout);\n      this._timeout = setTimeout(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(entity.status !== 'disconnect')) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return _this2.reconnect();\n\n              case 5:\n                _context.next = 9;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](2);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 7]]);\n      })), delay);\n    }\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this3 = this;\n\n      var entity = this.entity;\n      this.emit('reconnecting'); // Allow calling start() even though status is not offline\n      // reset status property right after\n\n      var status = entity.status;\n      entity.status = 'offline';\n      var start = entity.start(entity.startOptions);\n      entity.status = status;\n      return start.then(function () {\n        _this3.emit('reconnected');\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this4 = this;\n\n      var entity = this.entity;\n      var listeners = {};\n\n      listeners.disconnect = function () {\n        _this4.scheduleReconnect();\n      };\n\n      this.listeners = listeners;\n      entity.on('disconnect', listeners.disconnect);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var entity = this.entity,\n          listeners = this.listeners,\n          _timeout = this._timeout;\n      entity.removeListener('disconnect', listeners.disconnect);\n      clearTimeout(_timeout);\n    }\n  }]);\n\n  return Reconnect;\n}(EventEmitter);\n\nmodule.exports = function reconnect(_ref2) {\n  var entity = _ref2.entity;\n  var r = new Reconnect(entity);\n  r.start();\n  return r;\n};","map":null,"metadata":{},"sourceType":"script"}