{"ast":null,"code":"'use strict';\n/**\n * References\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-semantics-iq\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-error\n */\n\nvar _regeneratorRuntime = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _slicedToArray = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar xml = require('@xmpp/xml');\n\nvar NS_STANZA = 'urn:ietf:params:xml:ns:xmpp-stanzas';\n\nfunction isQuery(_ref) {\n  var name = _ref.name,\n      type = _ref.type;\n  if (name !== 'iq') return false;\n  if (type === 'error' || type === 'result') return false;\n  return true;\n}\n\nfunction isValidQuery(_ref2, child) {\n  var type = _ref2.type,\n      stanza = _ref2.stanza;\n  if (type !== 'get' && type !== 'set') return false;\n  if (stanza.children.length !== 1) return false;\n  if (!child) return false;\n  return true;\n}\n\nfunction buildReply(_ref3) {\n  var stanza = _ref3.stanza;\n  return xml('iq', {\n    to: stanza.attrs.from,\n    from: stanza.attrs.to,\n    id: stanza.attrs.id\n  });\n}\n\nfunction buildReplyResult(ctx, child) {\n  var reply = buildReply(ctx);\n  reply.attrs.type = 'result';\n\n  if (child) {\n    reply.append(child);\n  }\n\n  return reply;\n}\n\nfunction buildReplyError(ctx, error, child) {\n  var reply = buildReply(ctx);\n  reply.attrs.type = 'error';\n\n  if (child) {\n    reply.append(child);\n  }\n\n  reply.append(error);\n  return reply;\n}\n\nfunction buildError(type, condition) {\n  return xml('error', {\n    type: type\n  }, xml(condition, NS_STANZA));\n}\n\nfunction iqHandler(entity) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _iqHandler = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx, next) {\n        var stanza, _stanza$children, child, reply;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (isQuery(ctx)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", next());\n\n              case 2:\n                stanza = ctx.stanza;\n                _stanza$children = _slicedToArray(stanza.children, 1), child = _stanza$children[0];\n\n                if (isValidQuery(ctx, child)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", buildReplyError(ctx, buildError('modify', 'bad-request'), child));\n\n              case 6:\n                ctx.element = child;\n                _context.prev = 7;\n                _context.next = 10;\n                return next();\n\n              case 10:\n                reply = _context.sent;\n                _context.next = 17;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](7);\n                entity.emit('error', _context.t0);\n                reply = buildError('cancel', 'internal-server-error');\n\n              case 17:\n                if (!reply) {\n                  reply = buildError('cancel', 'service-unavailable');\n                }\n\n                if (!(reply instanceof xml.Element && reply.is('error'))) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", buildReplyError(ctx, reply, child));\n\n              case 20:\n                return _context.abrupt(\"return\", buildReplyResult(ctx, reply instanceof xml.Element ? reply : undefined));\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[7, 13]]);\n      }));\n\n      function iqHandler(_x, _x2) {\n        return _iqHandler.apply(this, arguments);\n      }\n\n      return iqHandler;\n    }()\n  );\n}\n\nfunction route(type, ns, name, handler) {\n  return function (ctx, next) {\n    if (ctx.type !== type | !ctx.element || !ctx.element.is(name, ns)) return next();\n    return handler(ctx, next);\n  };\n}\n\nmodule.exports = function (_ref4) {\n  var middleware = _ref4.middleware,\n      entity = _ref4.entity;\n  middleware.use(iqHandler(entity));\n  return {\n    get: function get(ns, name, handler) {\n      middleware.use(route('get', ns, name, handler));\n    },\n    set: function set(ns, name, handler) {\n      middleware.use(route('set', ns, name, handler));\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}