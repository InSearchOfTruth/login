{"ast":null,"code":"'use strict';\n\nvar tls = require('tls');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar core = require('node-xmpp-core');\n\nvar inherits = core.inherits;\nvar Connection = core.Connection;\nvar JID = core.JID;\nvar SRV = core.SRV;\n\nvar BOSHConnection = require('./bosh');\n\nvar WSConnection = require('./websockets');\n\nvar debug = require('debug')('xmpp:client:session');\n\nfunction Session(opts) {\n  EventEmitter.call(this);\n  this.setOptions(opts);\n\n  if (opts.websocket && opts.websocket.url) {\n    debug('start websocket connection');\n\n    this._setupWebsocketConnection(opts);\n  } else if (opts.bosh && opts.bosh.url) {\n    debug('start bosh connection');\n\n    this._setupBoshConnection(opts);\n  } else {\n    debug('start socket connection');\n\n    this._setupSocketConnection(opts);\n  }\n}\n\ninherits(Session, EventEmitter);\n\nSession.prototype._setupSocketConnection = function (opts) {\n  var params = {\n    xmlns: {\n      '': opts.xmlns\n    },\n    streamAttrs: {\n      version: '1.0',\n      to: this.jid.domain\n    },\n    serialized: opts.serialized\n  };\n\n  for (var key in opts) {\n    if (!(key in params)) {\n      params[key] = opts[key];\n    }\n  }\n\n  this.connection = new Connection(params);\n\n  this._addConnectionListeners();\n\n  if (opts.host || opts.port) {\n    this._socketConnectionToHost(opts);\n  } else if (!SRV) {\n    throw new Error('Cannot load SRV');\n  } else {\n    this._performSrvLookup(opts);\n  }\n};\n\nSession.prototype._socketConnectionToHost = function (opts) {\n  var _this = this;\n\n  if (opts.legacySSL) {\n    this.connection.allowTLS = false;\n    this.connection.connect({\n      socket: function socket() {\n        return tls.connect(opts.port || 5223, opts.host || 'localhost', opts.credentials || {}, function () {\n          if (this.socket.authorized) {\n            _this.emit('connect', this.socket);\n          } else {\n            _this.emit('error', 'unauthorized');\n          }\n        }.bind(this));\n      }\n    });\n  } else {\n    if (opts.credentials) {\n      this.connection.credentials = tls.createSecureContext(opts.credentials);\n    }\n\n    if (opts.disallowTLS) this.connection.allowTLS = false;\n    this.connection.listen({\n      socket: function socket() {\n        // wait for connect event listeners\n        process.nextTick(function () {\n          this.socket.connect(opts.port || 5222, opts.host);\n        }.bind(this));\n        var socket = opts.socket;\n        opts.socket = null;\n        return socket; // maybe create new socket\n      }\n    });\n  }\n};\n\nSession.prototype._performSrvLookup = function (opts) {\n  if (opts.legacySSL) {\n    throw new Error('LegacySSL mode does not support DNS lookups');\n  }\n\n  if (opts.credentials) {\n    this.connection.credentials = tls.createSecureContext(opts.credentials);\n  }\n\n  if (opts.disallowTLS) {\n    this.connection.allowTLS = false;\n  }\n\n  this.connection.listen({\n    socket: SRV.connect({\n      socket: opts.socket,\n      services: ['_xmpp-client._tcp'],\n      domain: this.jid.domain,\n      defaultPort: 5222\n    })\n  });\n};\n\nSession.prototype._setupBoshConnection = function (opts) {\n  this.connection = new BOSHConnection({\n    jid: this.jid,\n    bosh: opts.bosh\n  });\n\n  this._addConnectionListeners();\n\n  this.connection.on('connected', function () {\n    // Clients start <stream:stream>, servers reply\n    if (this.connection.startStream) {\n      this.connection.startStream();\n    }\n  }.bind(this));\n};\n\nSession.prototype._setupWebsocketConnection = function (opts) {\n  this.connection = new WSConnection({\n    jid: this.jid,\n    websocket: opts.websocket\n  });\n\n  this._addConnectionListeners();\n\n  this.connection.on('connected', function () {\n    // Clients start <stream:stream>, servers reply\n    if (this.connection.startStream) {\n      this.connection.startStream();\n    }\n  }.bind(this));\n};\n\nSession.prototype.setOptions = function (opts) {\n  this.jid = typeof opts.jid === 'string' ? new JID(opts.jid) : opts.jid;\n  this.password = opts.password;\n  this.preferredSaslMechanism = opts.preferredSaslMechanism;\n  this.api_key = opts.api_key;\n  this.access_token = opts.access_token;\n  this.oauth2_token = opts.oauth2_token;\n  this.oauth2_auth = opts.oauth2_auth;\n  this.register = opts.register;\n\n  if (typeof opts.actAs === 'string') {\n    this.actAs = new JID(opts.actAs);\n  } else {\n    this.actAs = opts.actAs;\n  }\n};\n\nSession.prototype._addConnectionListeners = function (con) {\n  con = con || this.connection;\n  con.on('stanza', this.onStanza.bind(this));\n  con.on('drain', this.emit.bind(this, 'drain'));\n  con.on('end', this.emit.bind(this, 'end'));\n  con.on('close', this.emit.bind(this, 'close'));\n  con.on('error', this.emit.bind(this, 'error'));\n  con.on('connect', this.emit.bind(this, 'connect'));\n  con.on('reconnect', this.emit.bind(this, 'reconnect'));\n  con.on('disconnect', this.emit.bind(this, 'disconnect'));\n\n  if (con.startStream) {\n    con.on('connect', function () {\n      // Clients start <stream:stream>, servers reply\n      con.startStream();\n    });\n    this.on('auth', function () {\n      con.startStream();\n    });\n  }\n};\n\nSession.prototype.pause = function () {\n  if (this.connection && this.connection.pause) {\n    this.connection.pause();\n  }\n};\n\nSession.prototype.resume = function () {\n  if (this.connection && this.connection.resume) {\n    this.connection.resume();\n  }\n};\n\nSession.prototype.send = function (stanza) {\n  return this.connection ? this.connection.send(stanza) : false;\n};\n\nSession.prototype.end = function () {\n  if (this.connection) {\n    this.connection.end();\n  }\n};\n\nSession.prototype.onStanza = function () {};\n\nmodule.exports = Session;","map":null,"metadata":{},"sourceType":"script"}