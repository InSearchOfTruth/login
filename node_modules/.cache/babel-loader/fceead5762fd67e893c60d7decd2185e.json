{"ast":null,"code":"var config = require('./cubeConfig'),\n    Utils = require('./cubeInternalUtils');\n\nfunction PushNotificationsProxy(service) {\n  this.service = service;\n  this.subscriptions = new SubscriptionsProxy(service);\n  this.events = new EventsProxy(service);\n\n  this.base64Encode = function (str) {\n    return Utils.toBase64(str);\n  };\n}\n\nfunction SubscriptionsProxy(service) {\n  this.service = service;\n}\n\nSubscriptionsProxy.prototype = {\n  /**\n   * Create device based subscription (subscribes)\n   * @memberof CB.pushnotifications.subscriptions\n   * @param {object} params - Object of parameters\n   * @param {string} params.notification_channel - Declare which notification channels could be used to notify user about events. Allowed values: apns, apns_voip, gcm, mpns, bbps and email\n   * @param {object} params.push_token - Object of parameters\n   * @param {string} params.push_token.environment - Determine application mode. It allows conveniently separate development and production modes. Allowed values: evelopment or production\n   * @param {string} [params.push_token.bundle_identifier] - A unique identifier for client's application. In iOS, this is the Bundle Identifier. In Android - package id\n   * @param {string} params.push_token.client_identification_sequence - Identifies client device in 3-rd party service like APNS, GCM/FCM, BBPS or MPNS. Initially retrieved from 3-rd service and should be send to server to let it send push notifications to the client\n   * @param {object} params.device - Object of parameters\n   * @param {string} params.device.platform - Platform of device, which is the source of application running. Allowed values: ios, android, windows_phone, blackberry\n   * @param {string} params.device.udid - UDID (Unique Device identifier) of device, which is the source of application running. This must be anything sequence which uniquely identify particular device. This is needed to support schema: 1 User - Multiple devices\n   * @param {createPushSubscriptionCallback} callback - The createPushSubscriptionCallback function\n   */\n  create: function create(params, callback) {\n    /**\n     * Callback for CB.pushnotifications.subscriptions.create(params, callback)\n     * @callback createPushSubscriptionCallback\n     * @param {object} error - The error object\n     * @param {object} response - Array of all existent user's subscriptions\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.subscriptions),\n      type: 'POST',\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * Retrieve subscriptions for the user which is specified in the session token\n   * @memberof CB.pushnotifications.subscriptions\n   * @param {listPushSubscriptionCallback} callback - The listPushSubscriptionCallback function\n   */\n  list: function list(callback) {\n    /**\n     * Callback for CB.pushnotifications.subscriptions.list(callback)\n     * @callback listPushSubscriptionCallback\n     * @param {object} error - The error object\n     * @param {object} response - Array of all existent user's subscriptions\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.subscriptions)\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * Remove a subscription by its identifier (unsubscribes)\n   * @memberof CB.pushnotifications.subscriptions\n   * @param {number} id - An id of subscription to remove\n   * @param {deletePushSubscriptionCallback} callback - The deletePushSubscriptionCallback function\n   */\n  delete: function _delete(id, callback) {\n    /**\n     * Callback for CB.pushnotifications.subscriptions.delete(id, callback)\n     * @callback deletePushSubscriptionCallback\n     * @param {object} error - The error object\n     * @param {object} response - Empty body\n     */\n    var ajaxParams = {\n      type: 'DELETE',\n      dataType: 'text',\n      url: Utils.getUrl(config.urls.subscriptions, id)\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null);\n      }\n    });\n  }\n};\n\nfunction EventsProxy(service) {\n  this.service = service;\n}\n\nEventsProxy.prototype = {\n  /**\n   * Create notification event. This request will immediately produce notification delivery (push notification or email)\n   * @memberof CB.pushnotifications.events\n   *\n   * @param {object} params - Object of parameters\n   * @param {string} params.notification_type - Type of notification. Allowed values: push or email\n   * @param {string} params.environment - An environment of the notification. Allowed values: development or production\n   * @param {string} params.message - A payload of event. For push notifications: if event[push_type] not present - should be Base64 encoded text. if event[push_type] specified - should be formatted as described. For email: Base64 encoded text\n   *\n   * @param {string} [params.push_type] - Push Notification type. Used only if event[notification_type] = push, ignored in other cases. If not present - Notification will be delivered to all possible devices for specified users. Each platform has their own standard format. If specified - Notification will be delivered to the specified platform only. Allowed values: apns, apns_voip, gcm, mpns or bbps\n   * @param {string} [params.event_type] - Allowed values: one_shot, fixed_date or period_date. one_shot - a one-time event, which causes by an external object (the value is only valid if the 'date' is not specified). fixed_date - a one-time event, which occurs at a specified 'date' (the value is valid only if the 'date' is given). period_date - reusable event that occurs within a given 'period' from the initial 'date' (the value is only valid if the 'period' specified). By default: fixed_date, if 'date' is specified. period_date, if 'period' is specified. one_shot, if 'date' is not specified\n   * @param {string} [params.name] - The name of the event. Service information. Only for your own usage\n   * @param {number} [params.period] - The period of the event in seconds. Required if the event[event_type] = period_date. Possible values: 86400 (1 day). 604800 (1 week). 2592000 (1 month). 31557600 (1 year)\n   * @param {number} [params.date] - The date of the event to send on. Required if event[event_type] = fixed_date or period_date. If event[event_type] = fixed_date, the date can not be in the pas\n   *\n   * @param {object} [params.user] - User's object of parameters\n   * @param {number[]} [params.user.ids] - Notification's recipients - should contain a string of users' ids divided by commas\n   * @param {object} [params.user.tags] - User's object of tags\n   * @param {string[]} [params.user.tags.any] - Notification's recipients - should contain a string of tags divided by commas. Recipients (users) must have at least one tag that specified in the list\n   * @param {string[]} [params.user.tags.all] - Notification's recipients - should contain a string of tags divided by commas. Recipients (users) must exactly have only all tags that specified in list\n   * @param {string[]} [params.user.tags.exclude] - Notification's recipients - should contain a string of tags divided by commas. Recipients (users) mustn't have tags that specified in list\n   *\n   * @param {object} [params.external_user] - External user's object of parameters\n   * @param {number[]} [params.external_user.ids] - Notification's recipients - should contain a string of tags divided by commas. Recipients (users) mustn't have tags that specified in list\n   *\n   * @param {createPushEventCallback} callback - The createPushEventCallback function\n   */\n  create: function create(params, callback) {\n    /**\n     * Callback for CB.pushnotifications.events.create(params, callback)\n     * @callback createPushEventCallback\n     * @param {object} error - The error object\n     * @param {object} response - An event object\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.events),\n      type: 'POST',\n      contentType: 'application/json; charset=utf-8',\n      isNeedStringify: true,\n      data: {\n        event: params\n      }\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /** Get list of events which were created by current user\n   * @memberof CB.pushnotifications.events\n   * @param {object} params - Object of parameters\n   * @param {number} [params.page=1] - Used to paginate the results when more than one page of events retrieved\n   * @param {number} [params.per_page=10] - The maximum number of events to return per page, if not specified then the default is 10\n   * @param {listPushEventsCallback} callback - The listOfFilesCallback function\n   */\n  list: function list(params, callback) {\n    /**\n     * Callback for CB.pushnotifications.events.list(params, callback)\n     * @callback listPushEventsCallback\n     * @param {object} error - The error object\n     * @param {object} response - An array of events' objects\n     */\n    if (typeof params === 'function' && typeof callback === 'undefined') {\n      callback = params;\n      params = null;\n    }\n\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.events),\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /** Retrieve an event by ID\n   * @memberof CB.pushnotifications.events\n   * @param {number} id - An id of event to retrieve\n   * @param {getPushEventByIdCallback} callback - The getPushEventByIdCallback function\n   */\n  get: function get(id, callback) {\n    /**\n     * Callback for CB.pushnotifications.events.get(id, callback)\n     * @callback getPushEventByIdCallback\n     * @param {object} error - The error object\n     * @param {object} response - An array of events' objects\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.events, id)\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /** Delete an event by ID\n   * @memberof CB.pushnotifications.events\n   * @param {number} id - An id of event to delete\n   * @param {deletePushEventByIdCallback} callback - The deletePushEventByIdCallback function\n   */\n  delete: function _delete(id, callback) {\n    /**\n     * Callback for CB.pushnotifications.events.delete(id, callback)\n     * @callback deletePushEventByIdCallback\n     * @param {object} error - The error object\n     * @param {object} response - Empty body\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.events, id),\n      dataType: 'text',\n      type: 'DELETE'\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /** Retrieve an event's status by ID\n   * @memberof CB.pushnotifications.events\n   * @param {number} id - An id of event to retrieve its status\n   * @param {getPushEventStatusByIdCallback} callback - The getPushEventStatusByIdCallback function\n   */\n  status: function status(id, callback) {\n    /**\n     * Callback for CB.pushnotifications.events.status(id, callback)\n     * @callback getPushEventStatusByIdCallback\n     * @param {object} error - The error object\n     * @param {object} response - An array of events' objects\n     */\n    var ajaxParams = {\n      url: Utils.getUrl(config.urls.events, id + '/status')\n    };\n    this.service.ajax(ajaxParams, callback);\n  }\n};\nmodule.exports = PushNotificationsProxy;","map":null,"metadata":{},"sourceType":"script"}