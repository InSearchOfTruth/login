{"ast":null,"code":"var config = require('./cubeConfig'),\n    Utils = require('./cubeInternalUtils'),\n    fetchImpl = require('./cubeDependencies').fetchImpl,\n    formDataImpl = require('./cubeDependencies').formDataImpl;\n\nfunction ServiceProxy() {\n  this.sdkInstance = {\n    config: config,\n    session: null\n  };\n  this.currentUserId = null;\n  this.reqCount = 0;\n}\n\nServiceProxy.prototype = {\n  setSession: function setSession(session) {\n    this.sdkInstance.session = session;\n  },\n  getSession: function getSession() {\n    return this.sdkInstance.session;\n  },\n  setCurrentUserId: function setCurrentUserId(userId) {\n    this.currentUserId = userId;\n  },\n  getCurrentUserId: function getCurrentUserId() {\n    return this.currentUserId;\n  },\n  handleResponse: function handleResponse(error, response, next, retry) {\n    // can add middleware here...\n    if (Utils.isExpiredSessionError(error) && typeof config.on.sessionExpired === 'function') {\n      config.on.sessionExpired(function () {\n        next(error, response);\n      }, retry);\n    } else {\n      if (error) {\n        next(error, null);\n      } else {\n        next(null, response);\n      }\n    }\n  },\n  logRequest: function logRequest(params) {\n    var clonedData;\n    ++this.reqCount;\n\n    if (params.data && params.data.file) {\n      clonedData = JSON.parse(JSON.stringify(params.data));\n      clonedData.file = '...';\n    } else if (Utils.getEnv().nativescript) {\n      clonedData = JSON.stringify(params.data);\n    } else {\n      clonedData = params.data;\n    }\n\n    Utils.DLog('[Request][' + this.reqCount + ']', (params.type || 'GET') + ' ' + params.url, clonedData ? clonedData : '');\n  },\n  ajax: function ajax(params, callback) {\n    this.logRequest(params);\n    var self = this,\n        isGetOrHeadType = !params.type || params.type === 'GET' || params.type === 'HEAD',\n        cbSessionToken = self.sdkInstance && self.sdkInstance.session && self.sdkInstance.session.token,\n        iscbRequest = params.url.indexOf('s3.amazonaws.com') === -1,\n        isMultipartFormData = params.contentType === false,\n        cbDataType = params.dataType || 'json';\n    var cbUrl = params.url,\n        cbRequest = {},\n        cbRequestBody,\n        cbResponse;\n    cbRequest.method = params.type || 'GET';\n\n    if (params.data) {\n      cbRequestBody = _getBodyRequest();\n\n      if (isGetOrHeadType) {\n        cbUrl += '?' + cbRequestBody;\n      } else {\n        cbRequest.body = cbRequestBody;\n      }\n    }\n\n    if (!isMultipartFormData) {\n      cbRequest.headers = {\n        'Content-Type': params.contentType || 'application/x-www-form-urlencoded; charset=UTF-8'\n      };\n    }\n\n    if (iscbRequest) {\n      if (!cbRequest.headers) {\n        cbRequest.headers = {};\n      }\n\n      cbRequest.headers['CB-SDK'] = 'JS ' + config.version + ' - Client';\n\n      if (cbSessionToken) {\n        cbRequest.headers['CB-Token'] = cbSessionToken;\n      }\n    }\n\n    if (config.timeout) {\n      cbRequest.timeout = config.timeout;\n    }\n\n    fetchImpl(cbUrl, cbRequest).then(function (response) {\n      cbResponse = response;\n\n      if (cbDataType === 'text') {\n        return response.text();\n      } else {\n        return response.json();\n      }\n    }, function () {\n      // Need to research this issue, response doesn't exist if server will return empty body (status 200)\n      cbResponse = {\n        status: 200\n      };\n      return ' ';\n    }).then(function (body) {\n      _requestCallback(null, cbResponse, body);\n    }, function (error) {\n      _requestCallback(error);\n    });\n    /*\n           * Private functions\n           * Only for ServiceProxy.ajax() method closure\n           */\n\n    function _fixedEncodeURIComponent(str) {\n      return encodeURIComponent(str).replace(/[#$&+,/:;=?@\\[\\]]/g, function (c) {\n        return '%' + c.charCodeAt(0).toString(16);\n      });\n    }\n\n    function _getBodyRequest() {\n      var data = params.data;\n      var cbData;\n\n      if (isMultipartFormData) {\n        cbData = new formDataImpl();\n        Object.keys(data).forEach(function (item) {\n          if (params.fileToCustomObject && item === 'file') {\n            cbData.append(item, data[item].data, data[item].name);\n          } else {\n            cbData.append(item, params.data[item]);\n          }\n        });\n      } else if (params.isNeedStringify) {\n        cbData = JSON.stringify(data);\n      } else {\n        cbData = Object.keys(data).map(function (k) {\n          if (Utils.isObject(data[k])) {\n            return Object.keys(data[k]).map(function (v) {\n              return _fixedEncodeURIComponent(k) + '[' + (Utils.isArray(data[k]) ? '' : v) + ']=' + _fixedEncodeURIComponent(data[k][v]);\n            }).sort().join('&');\n          } else {\n            return _fixedEncodeURIComponent(k) + (Utils.isArray(data[k]) ? '[]' : '') + '=' + _fixedEncodeURIComponent(data[k]);\n          }\n        }).sort().join('&');\n      }\n\n      return cbData;\n    }\n\n    function _requestCallback(error, response, body) {\n      var statusCode = response && (response.status || response.statusCode);\n      var responseMessage, responseBody;\n\n      if (error || statusCode !== 200 && statusCode !== 201 && statusCode !== 202) {\n        var errorMsg;\n\n        try {\n          errorMsg = {\n            code: response && statusCode || error && error.code,\n            status: response && response.headers && response.headers.status || 'error',\n            message: body || error && error.errno,\n            detail: body && body.errors || error && error.syscall\n          };\n        } catch (e) {\n          errorMsg = error;\n        }\n\n        responseBody = body || error || body.errors;\n        responseMessage = Utils.getEnv().nativescript ? JSON.stringify(responseBody) : responseBody;\n        Utils.DLog('[Response][' + self.reqCount + ']', 'error', statusCode, responseMessage);\n\n        if (params.url.indexOf(config.urls.session) === -1) {\n          self.handleResponse(errorMsg, null, callback, retry);\n        } else {\n          callback(errorMsg, null);\n        }\n      } else {\n        responseBody = body && body !== ' ' ? body : 'empty body';\n        responseMessage = Utils.getEnv().nativescript ? JSON.stringify(responseBody) : responseBody;\n        Utils.DLog('[Response][' + self.reqCount + ']', responseMessage);\n\n        if (params.url.indexOf(config.urls.session) === -1) {\n          self.handleResponse(null, body, callback, retry);\n        } else {\n          callback(null, body);\n        }\n      }\n    }\n\n    function retry(session) {\n      if (!!session) {\n        self.setSession(session);\n        self.ajax(params, callback);\n      }\n    }\n  }\n};\nmodule.exports = ServiceProxy;","map":null,"metadata":{},"sourceType":"script"}