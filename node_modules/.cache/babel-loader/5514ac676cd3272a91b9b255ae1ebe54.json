{"ast":null,"code":"/* Chat module: Contact List\n *\n * Integration of Roster Items and Presence Subscriptions\n * http://xmpp.org/rfcs/rfc3921.html#int\n * default - Mutual Subscription\n *\n ----------------------------------------------------------------------------- */\nvar ChatUtils = require('./cubeChatInternalUtils'),\n    Utils = require('../cubeInternalUtils'),\n    Config = require('../cubeConfig');\n\nfunction ContactListProxy(options) {\n  this.helpers = options.helpers;\n  this.xmppClient = options.xmppClient;\n  this.nodeStanzasCallbacks = options.nodeStanzasCallbacks; //\n\n  this.contacts = {};\n}\n\nContactListProxy.prototype = {\n  /**\n   * Receive contact list.\n   * @memberof CB.chat.roster\n   * @param {getRosterCallback} callback - The callback function.\n   * */\n  get: function get(callback) {\n    /**\n     * This callback Return contact list.\n     * @callback getRosterCallback\n     * @param {Object} roster - Object of subscribed users.\n     * */\n    var self = this,\n        stanzaId = ChatUtils.getUniqueId('getRoster');\n    var contacts = {},\n        iqStanza = ChatUtils.createIqStanza({\n      type: 'get',\n      from: this.helpers.getUserCurrentJid(),\n      id: stanzaId\n    });\n    iqStanza.c('query', {\n      xmlns: ChatUtils.MARKERS.ROSTER\n    });\n\n    function _getItems(stanza) {\n      if (Utils.getEnv().browser) {\n        return stanza.getElementsByTagName('item');\n      } else {\n        return stanza.getChild('query').children;\n      }\n    }\n\n    function _callbackWrap(stanza) {\n      var items = _getItems(stanza);\n      /** TODO */\n\n\n      for (var i = 0, len = items.length; i < len; i++) {\n        var userId = self.helpers.getIdFromNode(ChatUtils.getAttr(items[i], 'jid')),\n            ask = ChatUtils.getAttr(items[i], 'ask'),\n            subscription = ChatUtils.getAttr(items[i], 'subscription'),\n            name = ChatUtils.getAttr(items[i], 'name'),\n            isUniqName = userId + '-' + Config.creds.appId !== name;\n        contacts[userId] = {\n          subscription: subscription,\n          ask: ask || null,\n          name: isUniqName ? name : null\n        };\n      }\n\n      callback(contacts);\n    }\n\n    if (Utils.getEnv().browser) {\n      self.xmppClient.sendIQ(iqStanza, _callbackWrap);\n    } else {\n      self.nodeStanzasCallbacks[stanzaId] = _callbackWrap;\n      self.xmppClient.send(iqStanza);\n    }\n  },\n\n  /**\n   * Add users to contact list.\n   * @memberof CB.chat.roster\n   * @param {Object | Number} params - Object of parameters or user id.\n   * @param {Number} params.userId - The contact's id.\n   * @param {String} [params.name] - The contact's name.\n   * @param {addRosterCallback} callback - The callback function.\n   * */\n  add: function add(params, callback) {\n    /**\n     * Callback for CB.chat.roster.add(). Run without parameters.\n     * @callback addRosterCallback\n     * */\n    var self = this,\n        userId = params.userId || params,\n        userJid = self.helpers.jidOrUserId(userId),\n        stanzaId = ChatUtils.getUniqueId('addContactInRoster');\n    var iqStanza = ChatUtils.createIqStanza({\n      type: 'set',\n      from: self.helpers.getUserCurrentJid(),\n      id: stanzaId\n    });\n    self.contacts[userId] = {\n      subscription: 'none',\n      ask: 'subscribe',\n      name: params.name || null\n    };\n    iqStanza.c('query', {\n      xmlns: ChatUtils.MARKERS.ROSTER\n    }).c('item', {\n      jid: userJid,\n      name: params.name || null\n    });\n\n    if (Utils.getEnv().browser) {\n      self.xmppClient.sendIQ(iqStanza, _callbackWrap);\n    } else {\n      self.nodeStanzasCallbacks[stanzaId] = _callbackWrap;\n      self.xmppClient.send(iqStanza);\n    }\n\n    function _callbackWrap() {\n      self._sendSubscriptionPresence({\n        jid: userJid,\n        type: 'subscribe'\n      });\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n    }\n  },\n\n  /**\n   * Confirm subscription with some user.\n   * @memberof CB.chat.roster\n   * @param {Object | Number} params - Object of parameters or user id.\n   * @param {Number} params.userId - The contact's id.\n   * @param {String} [params.name] - The contact's name.\n   * @param {addRosterCallback} callback - The callback function.\n   * */\n  confirm: function confirm(params, callback) {\n    /**\n     * Callback for CB.chat.roster.confirm(). Run without parameters.\n     * @callback confirmRosterCallback\n     * */\n    var userId = params.userId || params,\n        userJid = this.helpers.jidOrUserId(userId);\n\n    this._sendSubscriptionPresence({\n      jid: userJid,\n      type: 'subscribed'\n    });\n\n    if (Config.chat.contactList.subscriptionMode.mutual) {\n      this.add(params, function () {\n        _callbackWrap();\n      });\n    } else {\n      _callbackWrap();\n    }\n\n    function _callbackWrap() {\n      if (typeof callback === 'function') {\n        callback();\n      }\n    }\n  },\n\n  /**\n   * Reject subscription with some user.\n   * @memberof CB.chat.roster\n   * @param {Number} userId - The contact's id.\n   * @param {rejectRosterCallback} callback - The callback function.\n   * */\n  reject: function reject(userId, callback) {\n    /**\n     * Callback for CB.chat.roster.reject(). Run without parameters.\n     * @callback rejectRosterCallback\n     * */\n    var userJid = this.helpers.jidOrUserId(userId);\n    this.contacts[userId] = {\n      subscription: 'none',\n      ask: null\n    };\n\n    this._sendSubscriptionPresence({\n      jid: userJid,\n      type: 'unsubscribed'\n    });\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  },\n\n  /**\n   * Update contact's name.\n   * @memberof CB.chat.roster\n   * @param {Object} params - Object of parameters.\n   * @param {Number} params.userId - The contact's id.\n   * @param {String} params.name - The new contact's name.\n   * @param {updateNameRosterCallback} callback - The callback function.\n   * */\n  updateName: function updateName(params, callback) {\n    /**\n     * Callback for CB.chat.roster.updateName(). Run without parameters.\n     * @callback updateNameRosterCallback\n     * */\n    var userJid = this.helpers.jidOrUserId(params.userId),\n        stanzaId = ChatUtils.getUniqueId('updateContactInRoster');\n    var contact = this.contacts[params.userId];\n\n    if (Utils.isObject(contact)) {\n      contact.name = params.name || null;\n    } else {\n      _callbackWrap('No contact exists with provided user id');\n\n      return;\n    }\n\n    var iqStanza = ChatUtils.createIqStanza({\n      type: 'set',\n      from: this.helpers.getUserCurrentJid(),\n      id: stanzaId\n    });\n    iqStanza.c('query', {\n      xmlns: ChatUtils.MARKERS.ROSTER\n    }).c('item', {\n      jid: userJid,\n      name: params.name || null\n    });\n\n    if (Utils.getEnv().browser) {\n      this.xmppClient.sendIQ(iqStanza, _callbackWrap);\n    } else {\n      this.nodeStanzasCallbacks[stanzaId] = _callbackWrap;\n      this.xmppClient.send(iqStanza);\n    }\n\n    function _callbackWrap(error) {\n      if (typeof callback === 'function') {\n        if (error) {\n          callback(error);\n        } else {\n          callback();\n        }\n      }\n    }\n  },\n\n  /**\n   * Remove subscription with some user from your contact list.\n   * @memberof CB.chat.roster\n   * @param {Number} userId - The contact's id.\n   * @param {removeRosterCallback} callback - The callback function.\n   * */\n  remove: function remove(userId, callback) {\n    /**\n     * Callback for CB.chat.roster.remove(). Run without parameters.\n     * @callback removeRosterCallback\n     * */\n    var self = this,\n        userJid = this.helpers.jidOrUserId(userId),\n        stanzaId = ChatUtils.getUniqueId('removeConactInRoster');\n    var iqStanza = ChatUtils.createIqStanza({\n      type: 'set',\n      from: this.helpers.getUserCurrentJid(),\n      id: stanzaId\n    });\n    iqStanza.c('query', {\n      xmlns: ChatUtils.MARKERS.ROSTER\n    }).c('item', {\n      jid: userJid,\n      subscription: 'remove'\n    });\n\n    if (Utils.getEnv().browser) {\n      self.xmppClient.sendIQ(iqStanza, _callbackWrap);\n    } else {\n      self.nodeStanzasCallbacks[stanzaId] = _callbackWrap;\n      self.xmppClient.send(iqStanza);\n    }\n\n    function _callbackWrap() {\n      delete self.contacts[userId];\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n    }\n  },\n  _sendSubscriptionPresence: function _sendSubscriptionPresence(params) {\n    var presenceParams = {\n      to: params.jid,\n      type: params.type\n    };\n    var presenceStanza = ChatUtils.createPresenceStanza(presenceParams);\n    this.xmppClient.send(presenceStanza);\n  }\n};\nmodule.exports = ContactListProxy;","map":null,"metadata":{},"sourceType":"script"}