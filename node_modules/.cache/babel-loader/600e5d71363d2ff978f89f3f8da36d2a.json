{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Socket = require('./Socket');\n\nvar Connection = require('@xmpp/connection');\n\nvar xml = require('@xmpp/xml');\n\nvar FramedParser = require('./FramedParser');\n\nvar NS_FRAMING = 'urn:ietf:params:xml:ns:xmpp-framing';\n/* References\n * WebSocket protocol https://tools.ietf.org/html/rfc6455\n * WebSocket Web API https://html.spec.whatwg.org/multipage/comms.html#network\n * XMPP over WebSocket https://tools.ietf.org/html/rfc7395\n*/\n\nvar ConnectionWebSocket =\n/*#__PURE__*/\nfunction (_Connection) {\n  _inherits(ConnectionWebSocket, _Connection);\n\n  function ConnectionWebSocket() {\n    _classCallCheck(this, ConnectionWebSocket);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ConnectionWebSocket).apply(this, arguments));\n  }\n\n  _createClass(ConnectionWebSocket, [{\n    key: \"footerElement\",\n    // https://tools.ietf.org/html/rfc7395#section-3.6\n    value: function footerElement() {\n      return new xml.Element('close', {\n        xmlns: NS_FRAMING\n      });\n    } // https://tools.ietf.org/html/rfc7395#section-3.4\n\n  }, {\n    key: \"headerElement\",\n    value: function headerElement() {\n      var el = _get(_getPrototypeOf(ConnectionWebSocket.prototype), \"headerElement\", this).call(this);\n\n      el.name = 'open';\n      el.attrs.xmlns = NS_FRAMING;\n      return el;\n    }\n  }, {\n    key: \"socketParameters\",\n    value: function socketParameters(service) {\n      return service.match(/^wss?:\\/\\//) ? service : undefined;\n    }\n  }]);\n\n  return ConnectionWebSocket;\n}(Connection);\n\nConnectionWebSocket.prototype.Socket = Socket;\nConnectionWebSocket.prototype.NS = 'jabber:client';\nConnectionWebSocket.prototype.Parser = FramedParser;\nmodule.exports = ConnectionWebSocket;","map":null,"metadata":{},"sourceType":"script"}