{"ast":null,"code":"/* Chat module: Group Chat (Dialog)\n *\n * Multi-User Chat\n * http://xmpp.org/extensions/xep-0045.html\n *\n ----------------------------------------------------------------------------- */\nvar ChatUtils = require('./cubeChatInternalUtils'),\n    Utils = require('../cubeInternalUtils');\n\nfunction MucProxy(options) {\n  this.helpers = options.helpers;\n  this.xmppClient = options.xmppClient;\n  this.nodeStanzasCallbacks = options.nodeStanzasCallbacks; //\n\n  this.joinedRooms = {};\n}\n\nMucProxy.prototype = {\n  /**\n   * Join to the group dialog.\n   * @memberof CB.chat.muc\n   * @param {String} dialogIdOrJid - Use dialog jid or dialog id to join to this dialog.\n   * @param {joinMacCallback} callback - The callback function.\n   * */\n  join: function join(dialogIdOrJid, callback) {\n    /**\n     * Callback for CB.chat.muc.join().\n     * @param {Object} error - Returns error object or null\n     * @param {Object} responce - Returns responce\n     * @callback joinMacCallback\n     * */\n    var self = this,\n        id = ChatUtils.getUniqueId('join'),\n        dialogJid = this.helpers.getDialogJid(dialogIdOrJid),\n        presenceParams = {\n      id: id,\n      from: self.helpers.getUserCurrentJid(),\n      to: self.helpers.getRoomJid(dialogJid)\n    };\n    var presenceStanza = ChatUtils.createPresenceStanza(presenceParams);\n    presenceStanza.c('x', {\n      xmlns: ChatUtils.MARKERS.MUC\n    }).c('history', {\n      maxstanzas: 0\n    });\n    this.joinedRooms[dialogJid] = true;\n\n    function handleJoinAnswer(stanza) {\n      var from = ChatUtils.getAttr(stanza, 'from'),\n          dialogId = self.helpers.getDialogIdFromNode(from),\n          x = ChatUtils.getElement(stanza, 'x'),\n          xXMLNS = ChatUtils.getAttr(x, 'xmlns'),\n          status = ChatUtils.getElement(x, 'status'),\n          statusCode = ChatUtils.getAttr(status, 'code');\n\n      if (callback.length == 1) {\n        Utils.safeCallbackCall(callback, stanza);\n        return true;\n      }\n\n      if (status && statusCode == '110') {\n        Utils.safeCallbackCall(callback, null, {\n          dialogId: dialogId\n        });\n      } else {\n        var type = ChatUtils.getAttr(stanza, 'type');\n\n        if (type && type === 'error' && xXMLNS == 'http://jabber.org/protocol/muc' && id.endsWith(':join')) {\n          var errorEl = ChatUtils.getElement(stanza, 'error'),\n              code = ChatUtils.getAttr(errorEl, 'code'),\n              errorMessage = ChatUtils.getElementText(errorEl, 'text');\n          Utils.safeCallbackCall(callback, {\n            code: code || 500,\n            message: errorMessage || 'Unknown issue'\n          }, {\n            dialogId: dialogId\n          });\n        }\n      }\n    }\n\n    if (Utils.getEnv().browser) {\n      if (typeof callback === 'function') {\n        self.xmppClient.XAddTrackedHandler(handleJoinAnswer, null, 'presence', null, id);\n      }\n    } else {\n      if (typeof callback === 'function') {\n        self.nodeStanzasCallbacks[id] = handleJoinAnswer;\n      }\n    }\n\n    self.xmppClient.send(presenceStanza);\n  },\n\n  /**\n   * Leave group chat dialog.\n   * @memberof CB.chat.muc\n   * @param {String} dialogJid - Use dialog jid to join to this dialog.\n   * @param {leaveMacCallback} callback - The callback function.\n   * */\n  leave: function leave(jid, callback) {\n    /**\n     * Callback for CB.chat.muc.leave().\n     * run without parameters;\n     * @callback leaveMacCallback\n     * */\n    var self = this,\n        presenceParams = {\n      type: 'unavailable',\n      from: self.helpers.getUserCurrentJid(),\n      to: self.helpers.getRoomJid(jid)\n    };\n    var presenceStanza = ChatUtils.createPresenceStanza(presenceParams);\n    delete this.joinedRooms[jid];\n\n    if (Utils.getEnv().browser) {\n      var roomJid = self.helpers.getRoomJid(jid);\n\n      if (typeof callback === 'function') {\n        self.xmppClient.XAddTrackedHandler(callback, null, 'presence', presenceParams.type, null, roomJid);\n      }\n    } else {\n      /** The answer don't contain id */\n      if (typeof callback === 'function') {\n        self.nodeStanzasCallbacks['muc:leave'] = callback;\n      }\n    }\n\n    self.xmppClient.send(presenceStanza);\n  },\n\n  /**\n   * Leave group chat dialog.\n   * @memberof CB.chat.muc\n   * @param {String} dialogJid - Use dialog jid to join to this dialog.\n   * @param {listOnlineUsersMacCallback} callback - The callback function.\n   * */\n  listOnlineUsers: function listOnlineUsers(dialogJID, callback) {\n    /**\n     * Callback for CB.chat.muc.leave().\n     * @param {Object} Users - list of online users\n     * @callback listOnlineUsersMacCallback\n     * */\n    var self = this,\n        iqParams = {\n      type: 'get',\n      to: dialogJID,\n      from: self.helpers.getUserCurrentJid(),\n      id: ChatUtils.getUniqueId('muc_disco_items')\n    };\n    var iqStanza = ChatUtils.createIqStanza(iqParams);\n    iqStanza.c('query', {\n      xmlns: 'http://jabber.org/protocol/disco#items'\n    });\n\n    function _getUsers(stanza) {\n      var stanzaId = stanza.attrs.id;\n\n      if (self.nodeStanzasCallbacks[stanzaId]) {\n        var items = stanza.getChild('query').getChildElements('item');\n        var users = [];\n\n        for (var i = 0, len = items.length; i < len; i++) {\n          var userId = self.helpers.getUserIdFromRoomJid(items[i].attrs.jid);\n          users.push(parseInt(userId));\n        }\n\n        callback(users);\n      }\n    }\n\n    if (Utils.getEnv().browser) {\n      self.xmppClient.sendIQ(iqStanza, function (stanza) {\n        var items = stanza.getElementsByTagName('item');\n        var onlineUsers = [];\n\n        for (var i = 0, len = items.length; i < len; i++) {\n          var userId = self.helpers.getUserIdFromRoomJid(items[i].getAttribute('jid'));\n          onlineUsers.push(parseInt(userId));\n        }\n\n        callback(onlineUsers);\n      });\n    } else {\n      self.xmppClient.send(iqStanza);\n      self.nodeStanzasCallbacks[iqParams.id] = _getUsers;\n    }\n  }\n};\nmodule.exports = MucProxy;","map":null,"metadata":{},"sourceType":"script"}