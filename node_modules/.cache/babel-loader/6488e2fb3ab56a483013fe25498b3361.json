{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Connection = require('@xmpp/connection');\n\nvar Client =\n/*#__PURE__*/\nfunction (_Connection) {\n  _inherits(Client, _Connection);\n\n  function Client(options) {\n    var _this;\n\n    _classCallCheck(this, Client);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Client).call(this, options));\n    _this.transports = [];\n    return _this;\n  }\n\n  _createClass(Client, [{\n    key: \"send\",\n    value: function send(element) {\n      var _get2;\n\n      if (!element.attrs.xmlns && (element.is('iq') || element.is('message') || element.is('presence'))) {\n        element.attrs.xmlns = 'jabber:client'; // FIXME no need for TCP/TLS transports\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(Client.prototype), \"send\", this)).call.apply(_get2, [this, element].concat(args));\n    }\n  }, {\n    key: \"_findTransport\",\n    value: function _findTransport(service) {\n      return this.transports.find(function (Transport) {\n        try {\n          return Transport.prototype.socketParameters(service) !== undefined;\n        } catch (err) {\n          return false;\n        }\n      });\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(service) {\n      var Transport = this._findTransport(service);\n\n      if (!Transport) {\n        throw new Error('No compatible connection method found.');\n      }\n\n      this.Transport = Transport;\n      this.Socket = Transport.prototype.Socket;\n      this.Parser = Transport.prototype.Parser;\n      return _get(_getPrototypeOf(Client.prototype), \"connect\", this).call(this, service);\n    }\n  }, {\n    key: \"socketParameters\",\n    value: function socketParameters() {\n      var _this$Transport$proto;\n\n      return (_this$Transport$proto = this.Transport.prototype).socketParameters.apply(_this$Transport$proto, arguments);\n    }\n  }, {\n    key: \"header\",\n    value: function header() {\n      var _this$Transport$proto2;\n\n      return (_this$Transport$proto2 = this.Transport.prototype).header.apply(_this$Transport$proto2, arguments);\n    }\n  }, {\n    key: \"headerElement\",\n    value: function headerElement() {\n      var _this$Transport$proto3;\n\n      return (_this$Transport$proto3 = this.Transport.prototype).headerElement.apply(_this$Transport$proto3, arguments);\n    }\n  }, {\n    key: \"footer\",\n    value: function footer() {\n      var _this$Transport$proto4;\n\n      return (_this$Transport$proto4 = this.Transport.prototype).footer.apply(_this$Transport$proto4, arguments);\n    }\n  }, {\n    key: \"footerElement\",\n    value: function footerElement() {\n      var _this$Transport$proto5;\n\n      return (_this$Transport$proto5 = this.Transport.prototype).footerElement.apply(_this$Transport$proto5, arguments);\n    }\n  }]);\n\n  return Client;\n}(Connection);\n\nClient.prototype.NS = 'jabber:client';\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}