{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar xml = require('@xmpp/xml');\n\nvar xid = require('@xmpp/id');\n\nvar StanzaError = require('@xmpp/middleware/lib/StanzaError');\n\nvar _require = require('@xmpp/events'),\n    Deferred = _require.Deferred;\n\nfunction isReply(_ref) {\n  var name = _ref.name,\n      type = _ref.type;\n  if (name !== 'iq') return false;\n  if (type !== 'error' && type !== 'result') return false;\n  return true;\n}\n\nmodule.exports = function iqCaller(_ref2) {\n  var entity = _ref2.entity,\n      middleware = _ref2.middleware;\n  var handlers = new Map();\n  middleware.use(function (_ref3, next) {\n    var type = _ref3.type,\n        name = _ref3.name,\n        id = _ref3.id,\n        stanza = _ref3.stanza;\n    if (!isReply({\n      name: name,\n      type: type\n    })) return next();\n    var deferred = handlers.get(id);\n\n    if (!deferred) {\n      return next();\n    }\n\n    if (type === 'error') {\n      deferred.reject(StanzaError.fromElement(stanza.getChild('error')));\n    } else {\n      deferred.resolve(stanza);\n    }\n\n    handlers.delete(id);\n  });\n  return {\n    handlers: handlers,\n    get: function () {\n      var _get = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(child) {\n        var _len,\n            args,\n            _key,\n            response,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                  args[_key - 1] = _args[_key];\n                }\n\n                _context.next = 3;\n                return this.request.apply(this, [xml('iq', {\n                  type: 'get'\n                }, child)].concat(args));\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response.children[0]);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }(),\n    set: function () {\n      var _set = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(child) {\n        var _len2,\n            args,\n            _key2,\n            response,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len2 = _args2.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                  args[_key2 - 1] = _args2[_key2];\n                }\n\n                _context2.next = 3;\n                return this.request.apply(this, [xml('iq', {\n                  type: 'set'\n                }, child)].concat(args));\n\n              case 3:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", response.children[0]);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function set(_x2) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }(),\n    request: function () {\n      var _request = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(stanza, params) {\n        var _ref4, to, id, deferred;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof params === 'string') {\n                  params = {\n                    to: params\n                  };\n                }\n\n                _ref4 = params || {}, to = _ref4.to, id = _ref4.id;\n\n                if (to) {\n                  stanza.attrs.to = to;\n                }\n\n                if (id) {\n                  stanza.attrs.id = id;\n                } else if (!stanza.attrs.id) {\n                  stanza.attrs.id = xid();\n                }\n\n                deferred = new Deferred();\n                handlers.set(stanza.attrs.id, deferred);\n                _context3.prev = 6;\n                _context3.next = 9;\n                return entity.send(stanza);\n\n              case 9:\n                _context3.next = 15;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](6);\n                handlers.delete(stanza.attrs.id);\n                throw _context3.t0;\n\n              case 15:\n                return _context3.abrupt(\"return\", deferred.promise);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[6, 11]]);\n      }));\n\n      function request(_x3, _x4) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  };\n};","map":null,"metadata":{},"sourceType":"script"}