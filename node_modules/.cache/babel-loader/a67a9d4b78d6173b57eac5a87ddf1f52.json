{"ast":null,"code":"'use strict';\n\nvar Helpers = require('./cubeWebRTCHelpers');\n\nvar SignalingConstants = require('./cubeWebRTCSignalingConstants');\n\nvar Utils = require('../cubeInternalUtils');\n\nvar config = require('../cubeConfig');\n\nvar ChatHelpers = require('../messaging/cubeChatInternalUtils');\n\nfunction WebRTCSignalingProvider(service, connection) {\n  this.service = service;\n  this.connection = connection;\n}\n\nWebRTCSignalingProvider.prototype.sendCandidate = function (userId, iceCandidates, ext) {\n  var extension = ext || {};\n  extension.iceCandidates = iceCandidates;\n  this.sendMessage(userId, extension, SignalingConstants.SignalingType.CANDIDATE);\n};\n\nWebRTCSignalingProvider.prototype.sendMessage = function (userId, ext, signalingType) {\n  var extension = ext || {},\n      self = this,\n      msg,\n      params;\n  /** basic parameters */\n\n  extension.moduleIdentifier = SignalingConstants.MODULE_ID;\n  extension.signalType = signalingType;\n  /** extension.sessionID */\n\n  /** extension.callType */\n\n  extension.platform = 'web';\n  /** extension.callerID */\n\n  /** extension.opponentsIDs */\n\n  /** extension.sdp */\n\n  if (extension.userInfo && !Object.keys(extension.userInfo).length) {\n    delete extension.userInfo;\n  }\n\n  params = {\n    to: Helpers.getUserJid(userId, config.creds.appId),\n    type: 'headline',\n    id: Utils.getBsonObjectId()\n  };\n  msg = ChatHelpers.createMessageStanza(params).c('extraParams', {\n    xmlns: ChatHelpers.MARKERS.CLIENT\n  });\n  Object.keys(extension).forEach(function (field) {\n    if (field === 'iceCandidates') {\n      /** iceCandidates */\n      msg = msg.c('iceCandidates');\n      extension[field].forEach(function (candidate) {\n        msg = msg.c('iceCandidate');\n        Object.keys(candidate).forEach(function (key) {\n          msg = msg.c(key).t(candidate[key]).up();\n        });\n        msg = msg.up();\n      });\n      msg = msg.up();\n    } else if (field === 'opponentsIDs') {\n      /** opponentsIDs */\n      msg = msg.c('opponentsIDs');\n      extension[field].forEach(function (opponentId) {\n        msg = msg.c('opponentID').t(opponentId).up();\n      });\n      msg = msg.up();\n    } else if (typeof extension[field] === 'object') {\n      ChatHelpers._JStoXML(field, extension[field], msg);\n    } else {\n      msg = msg.c(field).t(extension[field]).up();\n    }\n  });\n  msg = msg.up();\n  this.connection.send(msg);\n};\n\nmodule.exports = WebRTCSignalingProvider;","map":null,"metadata":{},"sourceType":"script"}