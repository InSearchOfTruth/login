{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _require = require('@xmpp/xml'),\n    Parser = _require.Parser,\n    Element = _require.Element,\n    XMLError = _require.XMLError;\n\nmodule.exports =\n/*#__PURE__*/\nfunction (_Parser) {\n  _inherits(FramedParser, _Parser);\n\n  function FramedParser() {\n    _classCallCheck(this, FramedParser);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FramedParser).apply(this, arguments));\n  }\n\n  _createClass(FramedParser, [{\n    key: \"onStartElement\",\n    value: function onStartElement(name, attrs) {\n      var element = new Element(name, attrs);\n      var cursor = this.cursor;\n\n      if (cursor) {\n        cursor.append(element);\n      }\n\n      this.cursor = element;\n    }\n  }, {\n    key: \"onEndElement\",\n    value: function onEndElement(name) {\n      var cursor = this.cursor;\n\n      if (name !== cursor.name) {\n        // <foo></bar>\n        this.emit('error', new XMLError(\"\".concat(cursor.name, \" must be closed.\")));\n        return;\n      }\n\n      if (cursor.parent) {\n        this.cursor = cursor.parent;\n        return;\n      }\n\n      if (cursor.is('open', 'urn:ietf:params:xml:ns:xmpp-framing')) {\n        this.emit('start', cursor);\n      } else if (cursor.is('close', 'urn:ietf:params:xml:ns:xmpp-framing')) {\n        this.emit('end', cursor);\n      } else {\n        this.emit('element', cursor);\n      }\n\n      this.cursor = null;\n    }\n  }]);\n\n  return FramedParser;\n}(Parser);","map":null,"metadata":{},"sourceType":"script"}