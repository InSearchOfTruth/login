{"ast":null,"code":"'use strict';\n\nvar Utils = require('../cubeInternalUtils'),\n    Config = require('../cubeConfig'),\n    ChatUtils = require('./cubeChatInternalUtils');\n\nfunction Helpers() {\n  this._userCurrentJid = '';\n}\n/**\n * @namespace CB.chat.helpers\n * */\n\n\nHelpers.prototype = {\n  /**\n   * Get unique id.\n   * @memberof CB.chat.helpers\n   * @param {String | Number} suffix - not required parameter.\n   * @returns {String} - UniqueId.\n   * */\n  getUniqueId: ChatUtils.getUniqueId,\n\n  /**\n   * Get unique id.\n   * @memberof CB.chat.helpers\n   * @param {String | Number} jidOrUserId - Jid or user id.\n   * @returns {String} - jid.\n   * */\n  jidOrUserId: function jidOrUserId(_jidOrUserId) {\n    var jid;\n\n    if (typeof _jidOrUserId === 'string') {\n      jid = _jidOrUserId;\n    } else if (typeof _jidOrUserId === 'number') {\n      jid = _jidOrUserId + '-' + Config.creds.appId + '@' + Config.endpoints.chat;\n    } else {\n      throw new Error('The method \"jidOrUserId\" may take jid or id');\n    }\n\n    return jid;\n  },\n\n  /**\n   * Get the chat type.\n   * @memberof CB.chat.helpers\n   * @param {String | Number} jidOrUserId - Jid or user id.\n   * @returns {String} - jid.\n   * */\n  typeChat: function typeChat(jidOrUserId) {\n    var chatType;\n\n    if (typeof jidOrUserId === 'string') {\n      chatType = jidOrUserId.indexOf('muc') > -1 ? 'groupchat' : 'chat';\n    } else if (typeof jidOrUserId === 'number') {\n      chatType = 'chat';\n    } else {\n      throw new Error('Unsupported chat type');\n    }\n\n    return chatType;\n  },\n\n  /**\n   * Get the recipint id.\n   * @memberof CB.chat.helpers\n   * @param {Array} occupantsIds - Array of user ids.\n   * @param {Number} UserId - Jid or user id.\n   * @returns {Number} recipient - recipient id.\n   * */\n  getRecipientId: function getRecipientId(occupantsIds, UserId) {\n    var recipient = null;\n    occupantsIds.forEach(function (item) {\n      if (item != UserId) {\n        recipient = item;\n      }\n    });\n    return recipient;\n  },\n\n  /**\n   * Get the User jid id.\n   * @memberof CB.chat.helpers\n   * @param {Number} UserId - The user id.\n   * @param {Number} appId - The application id.\n   * @returns {String} jid - The user jid.\n   * */\n  getUserJid: function getUserJid(userId, appId) {\n    if (!appId) {\n      return userId + '-' + Config.creds.appId + '@' + Config.endpoints.chat;\n    }\n\n    return userId + '-' + appId + '@' + Config.endpoints.chat;\n  },\n\n  /**\n   * Get the User nick with the muc domain.\n   * @memberof CB.chat.helpers\n   * @param {Number} UserId - The user id.\n   * @returns {String} mucDomainWithNick - The mac domain with he nick.\n   * */\n  getUserNickWithMucDomain: function getUserNickWithMucDomain(userId) {\n    return Config.endpoints.muc + '/' + userId;\n  },\n\n  /**\n   * Get the User id from jid.\n   * @memberof CB.chat.helpers\n   * @param {String} jid - The user jid.\n   * @returns {Number} id - The user id.\n   * */\n  getIdFromNode: function getIdFromNode(jid) {\n    return jid.indexOf('@') < 0 ? null : parseInt(jid.split('@')[0].split('-')[0]);\n  },\n\n  /**\n   * Get the dialog id from jid.\n   * @memberof CB.chat.helpers\n   * @param {String} jid - The dialog jid.\n   * @returns {String} dialogId - The dialog id.\n   * */\n  getDialogIdFromNode: function getDialogIdFromNode(jid) {\n    if (jid.indexOf('@') < 0) return null;\n    return jid.split('@')[0].split('_')[1];\n  },\n\n  /**\n   * Get the room jid from dialog id.\n   * @memberof CB.chat.helpers\n   * @param {String} dialogId - The dialog id.\n   * @returns {String} jid - The dialog jid.\n   * */\n  getRoomJidFromDialogId: function getRoomJidFromDialogId(dialogId) {\n    return Config.creds.appId + '_' + dialogId + '@' + Config.endpoints.muc;\n  },\n\n  /**\n   * Get the full room jid from room bare jid & user jid.\n   * @memberof CB.chat.helpers\n   * @param {String} jid - dialog's bare jid.\n   * @param {String} userJid - user's jid.\n   * @returns {String} jid - dialog's full jid.\n   * */\n  getRoomJid: function getRoomJid(jid) {\n    return jid + '/' + this.getIdFromNode(this._userCurrentJid);\n  },\n\n  /**\n   * Get user id from dialog's full jid.\n   * @memberof CB.chat.helpers\n   * @param {String} jid - dialog's full jid.\n   * @returns {String} user_id - User Id.\n   * */\n  getIdFromResource: function getIdFromResource(jid) {\n    var s = jid.split('/');\n    if (s.length < 2) return null;\n    s.splice(0, 1);\n    return parseInt(s.join('/'));\n  },\n\n  /**\n   * Get bare dialog's jid from dialog's full jid.\n   * @memberof CB.chat.helpers\n   * @param {String} jid - dialog's full jid.\n   * @returns {String} room_jid - dialog's bare jid.\n   * */\n  getRoomJidFromRoomFullJid: function getRoomJidFromRoomFullJid(jid) {\n    var s = jid.split('/');\n    if (s.length < 2) return null;\n    return s[0];\n  },\n\n  /**\n   * Generate BSON ObjectId.\n   * @memberof CB.chat.helpers\n   * @returns {String} BsonObjectId - The bson object id.\n   **/\n  getBsonObjectId: function getBsonObjectId() {\n    return Utils.getBsonObjectId();\n  },\n\n  /**\n   * Get the user id from the room jid.\n   * @memberof CB.chat.helpers\n   * @param {String} jid - resourse jid.\n   * @returns {String} userId - The user id.\n   * */\n  getUserIdFromRoomJid: function getUserIdFromRoomJid(jid) {\n    var arrayElements = jid.toString().split('/');\n\n    if (arrayElements.length === 0) {\n      return null;\n    }\n\n    return arrayElements[arrayElements.length - 1];\n  },\n  userCurrentJid: function userCurrentJid(client) {\n    if (Utils.getEnv().browser) {\n      return client.jid;\n    } else if (Utils.getEnv().reactnative) {\n      return client.jid._local + '@' + client.jid._domain + '/' + client.jid._resource;\n    } else {\n      // Node.js & Native Script\n      return client.jid.user + '@' + client.jid._domain + '/' + client.jid._resource;\n    }\n  },\n  getUserCurrentJid: function getUserCurrentJid() {\n    return this._userCurrentJid;\n  },\n  setUserCurrentJid: function setUserCurrentJid(jid) {\n    this._userCurrentJid = jid;\n  },\n  getDialogJid: function getDialogJid(identifier) {\n    return identifier.indexOf('@') > 0 ? identifier : this.getRoomJidFromDialogId(identifier);\n  }\n};\nmodule.exports = Helpers;","map":null,"metadata":{},"sourceType":"script"}