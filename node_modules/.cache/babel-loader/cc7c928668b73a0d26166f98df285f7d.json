{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar escaping = require('./escaping');\n/**\n * JID implements\n * - XMPP addresses according to RFC6122\n * - XEP-0106: JID Escaping\n *\n * @see http://tools.ietf.org/html/rfc6122#section-2\n * @see http://xmpp.org/extensions/xep-0106.html\n */\n\n\nvar JID =\n/*#__PURE__*/\nfunction () {\n  function JID(local, domain, resource) {\n    _classCallCheck(this, JID);\n\n    if (typeof domain !== 'string' || !domain) {\n      throw new TypeError(\"Invalid domain.\");\n    }\n\n    this.setDomain(domain);\n    this.setLocal(typeof local === 'string' ? local : '');\n    this.setResource(typeof resource === 'string' ? resource : '');\n  }\n\n  _createClass(JID, [{\n    key: Symbol.toPrimitive,\n    value: function value(hint) {\n      if (hint === 'number') {\n        return NaN;\n      }\n\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(unescape) {\n      var s = this._domain;\n\n      if (this._local) {\n        s = this.getLocal(unescape) + '@' + s;\n      }\n\n      if (this._resource) {\n        s = s + '/' + this._resource;\n      }\n\n      return s;\n    }\n    /**\n     * Convenience method to distinguish users\n     * */\n\n  }, {\n    key: \"bare\",\n    value: function bare() {\n      if (this._resource) {\n        return new JID(this._local, this._domain, null);\n      }\n\n      return this;\n    }\n    /**\n       * Comparison function\n       * */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this._local === other._local && this._domain === other._domain && this._resource === other._resource;\n    }\n    /**\n     * http://xmpp.org/rfcs/rfc6122.html#addressing-localpart\n     * */\n\n  }, {\n    key: \"setLocal\",\n    value: function setLocal(local, escape) {\n      escape = escape || escaping.detect(local);\n\n      if (escape) {\n        local = escaping.escape(local);\n      }\n\n      this._local = local && local.toLowerCase();\n      return this;\n    }\n  }, {\n    key: \"getLocal\",\n    value: function getLocal(unescape) {\n      unescape = unescape || false;\n      var local = null;\n\n      if (unescape) {\n        local = escaping.unescape(this._local);\n      } else {\n        local = this._local;\n      }\n\n      return local;\n    }\n    /**\n     * http://xmpp.org/rfcs/rfc6122.html#addressing-domain\n     */\n\n  }, {\n    key: \"setDomain\",\n    value: function setDomain(domain) {\n      this._domain = domain.toLowerCase();\n      return this;\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this._domain;\n    }\n    /**\n     * http://xmpp.org/rfcs/rfc6122.html#addressing-resourcepart\n     */\n\n  }, {\n    key: \"setResource\",\n    value: function setResource(resource) {\n      this._resource = resource;\n      return this;\n    }\n  }, {\n    key: \"getResource\",\n    value: function getResource() {\n      return this._resource;\n    }\n  }]);\n\n  return JID;\n}();\n\nObject.defineProperty(JID.prototype, 'local', {\n  get: JID.prototype.getLocal,\n  set: JID.prototype.setLocal\n});\nObject.defineProperty(JID.prototype, 'domain', {\n  get: JID.prototype.getDomain,\n  set: JID.prototype.setDomain\n});\nObject.defineProperty(JID.prototype, 'resource', {\n  get: JID.prototype.getResource,\n  set: JID.prototype.setResource\n});\nmodule.exports = JID;","map":null,"metadata":{},"sourceType":"script"}