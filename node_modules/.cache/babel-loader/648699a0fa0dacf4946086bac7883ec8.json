{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:\\\\practics\\\\ConnectyCube\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar resolve = require('./resolve');\n\nvar _require = require('@xmpp/connection'),\n    socketConnect = _require.socketConnect;\n\nfunction fetchURIs(_x) {\n  return _fetchURIs.apply(this, arguments);\n}\n\nfunction _fetchURIs() {\n  _fetchURIs = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(domain) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = _toConsumableArray;\n            _context2.t1 = Set;\n            _context2.next = 4;\n            return resolve(domain, {\n              srv: [{\n                service: 'xmpps-client',\n                protocol: 'tcp'\n              }, {\n                service: 'xmpp-client',\n                protocol: 'tcp'\n              }]\n            });\n\n          case 4:\n            _context2.t2 = function (record) {\n              return record.uri;\n            };\n\n            _context2.t3 = _context2.sent.map(_context2.t2);\n            _context2.t4 = new _context2.t1(_context2.t3);\n            return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t4));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchURIs.apply(this, arguments);\n}\n\nfunction filterSupportedURIs(entity, uris) {\n  return uris.filter(function (uri) {\n    return entity._findTransport(uri);\n  });\n}\n\nfunction fallbackConnect(_x2, _x3) {\n  return _fallbackConnect.apply(this, arguments);\n}\n\nfunction _fallbackConnect() {\n  _fallbackConnect = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(entity, uris) {\n    var uri, Transport, params, socket;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(uris.length === 0)) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new Error(\"Couldn't connect\");\n\n          case 2:\n            uri = uris.shift();\n            Transport = entity._findTransport(uri);\n\n            if (Transport) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", fallbackConnect(entity, uris));\n\n          case 6:\n            params = Transport.prototype.socketParameters(uri);\n            socket = new Transport.prototype.Socket();\n            _context3.prev = 8;\n            _context3.next = 11;\n            return socketConnect(socket, params);\n\n          case 11:\n            _context3.next = 16;\n            break;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](8);\n            return _context3.abrupt(\"return\", fallbackConnect(entity, uris));\n\n          case 16:\n            entity._attachSocket(socket);\n\n            socket.emit('connect');\n            entity.Transport = Transport;\n            entity.Socket = Transport.prototype.Socket;\n            entity.Parser = Transport.prototype.Parser;\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[8, 13]]);\n  }));\n  return _fallbackConnect.apply(this, arguments);\n}\n\nmodule.exports = function (_ref) {\n  var entity = _ref.entity;\n  var _connect = entity.connect;\n\n  entity.connect =\n  /*#__PURE__*/\n  function () {\n    var _connect2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(service) {\n      var uris;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!service || service.match(/:\\/\\//))) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _connect.call(this, service));\n\n            case 2:\n              _context.t0 = filterSupportedURIs;\n              _context.t1 = entity;\n              _context.next = 6;\n              return fetchURIs(service);\n\n            case 6:\n              _context.t2 = _context.sent;\n              uris = (0, _context.t0)(_context.t1, _context.t2);\n\n              if (!(uris.length === 0)) {\n                _context.next = 10;\n                break;\n              }\n\n              throw new Error('No compatible transport found.');\n\n            case 10:\n              _context.prev = 10;\n              _context.next = 13;\n              return fallbackConnect(entity, uris);\n\n            case 13:\n              _context.next = 20;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t3 = _context[\"catch\"](10);\n\n              entity._reset();\n\n              entity._status('disconnect');\n\n              throw _context.t3;\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[10, 15]]);\n    }));\n\n    function connect(_x4) {\n      return _connect2.apply(this, arguments);\n    }\n\n    return connect;\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}