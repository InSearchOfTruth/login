{"ast":null,"code":"var Config = require('../cubeConfig'),\n    Utils = require('../cubeInternalUtils');\n\nvar DIALOGS_API_URL = Config.urls.chat + '/Dialog';\n\nfunction DialogProxy(service) {\n  this.service = service;\n}\n\nDialogProxy.prototype = {\n  /**\n   * Retrieve list of dialogs.\n   * @memberof CB.chat.dialog\n   * @param {Object} params - Some filters to get only chat dialogs you need.\n   * @param {listDialogCallback} callback - The callback function.\n   * */\n  list: function list(params, callback) {\n    /**\n     * Callback for CB.chat.dialog.list().\n     * @param {Object} error - The error object\n     * @param {Object} resDialogs - the dialog list\n     * @callback listDialogCallback\n     * */\n    if (typeof params === 'function' && typeof callback === 'undefined') {\n      callback = params;\n      params = {};\n    }\n\n    var ajaxParams = {\n      url: Utils.getUrl(DIALOGS_API_URL),\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * Create new dialog.\n   * @memberof CB.chat.dialog\n   * @param {Object} params - Object of parameters.\n   * @param {createDialogCallback} callback - The callback function.\n   * */\n  create: function create(params, callback) {\n    /**\n     * Callback for CB.chat.dialog.create().\n     * @param {Object} error - The error object\n     * @param {Object} createdDialog - the dialog object\n     * @callback createDialogCallback\n     * */\n    if (params && params.occupants_ids && Utils.isArray(params.occupants_ids)) {\n      params.occupants_ids = params.occupants_ids.join(', ');\n    }\n\n    var ajaxParams = {\n      url: Utils.getUrl(DIALOGS_API_URL),\n      type: 'POST',\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * Update group dialog.\n   * @memberof CB.chat.dialog\n   * @param {String} id - The dialog ID.\n   * @param {Object} params - Object of parameters.\n   * @param {updateDialogCallback} callback - The callback function.\n   * */\n  update: function update(id, params, callback) {\n    /**\n     * Callback for CB.chat.dialog.update()\n     * @param {Object} error - The error object\n     * @param {Object} res - the dialog object\n     * @callback updateDialogCallback\n     * */\n    var ajaxParams = {\n      url: Utils.getUrl(DIALOGS_API_URL, id),\n      type: 'PUT',\n      contentType: 'application/json; charset=utf-8',\n      isNeedStringify: true,\n      data: params\n    };\n    this.service.ajax(ajaxParams, callback);\n  },\n\n  /**\n   * Delete a dialog or dialogs.\n   * @memberof CB.chat.dialog\n   * @param {Array} id - The dialog IDs array.\n   * @param {Object | function} params_or_callback - Object of parameters or callback function.\n   * @param {deleteDialogCallback} callback - The callback function.\n   * */\n  delete: function _delete(id, params_or_callback, callback) {\n    /**\n     * Callback for CB.chat.dialog.delete()\n     * @param {Object} error - The error object\n     * @callback deleteDialogCallback\n     * */\n    var ajaxParams = {\n      url: Utils.getUrl(DIALOGS_API_URL, id),\n      type: 'DELETE',\n      dataType: 'text'\n    };\n\n    if (arguments.length === 2) {\n      this.service.ajax(ajaxParams, params_or_callback);\n    } else if (arguments.length === 3) {\n      ajaxParams.data = params_or_callback;\n      this.service.ajax(ajaxParams, callback);\n    }\n  }\n};\nmodule.exports = DialogProxy;","map":null,"metadata":{},"sourceType":"script"}