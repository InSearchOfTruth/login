{"ast":null,"code":"'use strict';\n\nvar inherits = require('node-xmpp-core').inherits;\n\nvar Mechanism = require('./mechanism');\n\nvar crypto = require('crypto');\n\nvar MD5 = require('md5.js');\n/**\n * Hash a string\n */\n\n\nfunction md5(s, encoding) {\n  // we ignore crypto in the browser field of package.json\n  var hash = crypto.createHash ? crypto.createHash('md5') : new MD5();\n  return hash.update(s, 'binary').digest(encoding || 'binary');\n}\n\nfunction md5Hex(s) {\n  return md5(s, 'hex');\n}\n/**\n * Parse SASL serialization\n */\n\n\nfunction parseDict(s) {\n  var result = {};\n\n  while (s) {\n    var m;\n\n    if (m = /^(.+?)=(.*?[^\\\\]),\\s*(.*)/.exec(s)) {\n      result[m[1]] = m[2].replace(/\"/g, '');\n      s = m[3];\n    } else if (m = /^(.+?)=(.+?),\\s*(.*)/.exec(s)) {\n      result[m[1]] = m[2];\n      s = m[3];\n    } else if (m = /^(.+?)=\"(.*?[^\\\\])\"$/.exec(s)) {\n      result[m[1]] = m[2];\n      s = m[3];\n    } else if (m = /^(.+?)=(.+?)$/.exec(s)) {\n      result[m[1]] = m[2];\n      s = m[3];\n    } else {\n      s = null;\n    }\n  }\n\n  return result;\n}\n/**\n * SASL serialization\n */\n\n\nfunction encodeDict(dict) {\n  var s = '';\n\n  for (var k in dict) {\n    var v = dict[k];\n    if (v) s += ',' + k + '=\"' + v + '\"';\n  }\n\n  return s.substr(1); // without first ','\n}\n/**\n * Right-justify a string,\n * eg. pad with 0s\n */\n\n\nfunction rjust(s, targetLen, padding) {\n  while (s.length < targetLen) {\n    s = padding + s;\n  }\n\n  return s;\n}\n/**\n * Generate a string of 8 digits\n * (number used once)\n */\n\n\nfunction generateNonce() {\n  var result = '';\n\n  for (var i = 0; i < 8; i++) {\n    result += String.fromCharCode(48 + Math.ceil(Math.random() * 10));\n  }\n\n  return result;\n}\n/**\n * @see http://tools.ietf.org/html/rfc2831\n * @see http://wiki.xmpp.org/web/SASLandDIGEST-MD5\n */\n\n\nfunction DigestMD5() {\n  this.nonce_count = 0;\n  this.cnonce = generateNonce();\n  this.authcid = null;\n  this.actAs = null;\n  this.realm = null;\n  this.password = null;\n}\n\ninherits(DigestMD5, Mechanism);\nDigestMD5.prototype.name = 'DIGEST-MD5';\n\nDigestMD5.prototype.auth = function () {\n  return '';\n};\n\nDigestMD5.prototype.getNC = function () {\n  return rjust(this.nonce_count.toString(), 8, '0');\n};\n\nDigestMD5.prototype.responseValue = function (s) {\n  var dict = parseDict(s);\n\n  if (dict.realm) {\n    this.realm = dict.realm;\n  }\n\n  var value;\n\n  if (dict.nonce && dict.qop) {\n    this.nonce_count++;\n    var a1 = md5(this.authcid + ':' + this.realm + ':' + this.password) + ':' + dict.nonce + ':' + this.cnonce;\n    if (this.actAs) a1 += ':' + this.actAs;\n    var a2 = 'AUTHENTICATE:' + this.digest_uri;\n\n    if (dict.qop === 'auth-int' || dict.qop === 'auth-conf') {\n      a2 += ':00000000000000000000000000000000';\n    }\n\n    value = md5Hex(md5Hex(a1) + ':' + dict.nonce + ':' + this.getNC() + ':' + this.cnonce + ':' + dict.qop + ':' + md5Hex(a2));\n  }\n\n  return value;\n};\n\nDigestMD5.prototype.challenge = function (s) {\n  var dict = parseDict(s);\n\n  if (dict.realm) {\n    this.realm = dict.realm;\n  }\n\n  var response;\n\n  if (dict.nonce && dict.qop) {\n    var responseValue = this.responseValue(s);\n    response = {\n      username: this.authcid,\n      realm: this.realm,\n      nonce: dict.nonce,\n      cnonce: this.cnonce,\n      nc: this.getNC(),\n      qop: dict.qop,\n      'digest-uri': this.digest_uri,\n      response: responseValue,\n      charset: 'utf-8'\n    };\n    if (this.actAs) response.authzid = this.actAs;\n  } else if (dict.rspauth) {\n    return '';\n  }\n\n  return encodeDict(response);\n};\n\nDigestMD5.prototype.serverChallenge = function () {\n  var dict = {};\n  dict.realm = '';\n  this.nonce = dict.nonce = generateNonce();\n  dict.qop = 'auth';\n  this.charset = dict.charset = 'utf-8';\n  dict.algorithm = 'md5-sess';\n  return encodeDict(dict);\n}; // Used on the server to check for auth!\n\n\nDigestMD5.prototype.response = function (s) {\n  var dict = parseDict(s);\n  this.authcid = dict.username;\n  if (dict.nonce !== this.nonce) return false;\n  if (!dict.cnonce) return false;\n  this.cnonce = dict.cnonce;\n  if (this.charset !== dict.charset) return false;\n  this.response = dict.response;\n  return true;\n};\n\nDigestMD5.prototype.match = function (options) {\n  if (options.password) return true;\n  return false;\n};\n\nmodule.exports = DigestMD5;","map":null,"metadata":{},"sourceType":"script"}