{"ast":null,"code":"'use strict';\n\nvar Mechanism = require('./authentication/mechanism');\n/**\n * Available methods for client-side authentication (Client)\n * @param  Array offeredMechs  methods offered by server\n * @param  Array preferredMech preferred methods by client\n * @param  Array availableMech available methods on client\n */\n\n\nfunction selectMechanism(offeredMechs, preferredMech, availableMech) {\n  var mechClasses = [];\n  var byName = {};\n  var Mech;\n\n  if (Array.isArray(availableMech)) {\n    mechClasses = mechClasses.concat(availableMech);\n  }\n\n  mechClasses.forEach(function (mechClass) {\n    byName[mechClass.prototype.name] = mechClass;\n  });\n  /* Any preferred? */\n\n  if (byName[preferredMech] && offeredMechs.indexOf(preferredMech) >= 0) {\n    Mech = byName[preferredMech];\n  }\n  /* By priority */\n\n\n  mechClasses.forEach(function (mechClass) {\n    if (!Mech && offeredMechs.indexOf(mechClass.prototype.name) >= 0) {\n      Mech = mechClass;\n    }\n  });\n  return Mech ? new Mech() : null;\n}\n/**\n * Will detect the available mechanisms based on the given options\n * @param  {[type]} options client configuration\n * @param  Array availableMech available methods on client\n * @return {[type]}         available options\n */\n\n\nfunction detectMechanisms(options, availableMech) {\n  var mechClasses = availableMech || [];\n  var detect = [];\n  mechClasses.forEach(function (mechClass) {\n    var match = mechClass.prototype.match;\n    if (match(options)) detect.push(mechClass);\n  });\n  return detect;\n}\n\nexports.selectMechanism = selectMechanism;\nexports.detectMechanisms = detectMechanisms;\nexports.AbstractMechanism = Mechanism;","map":null,"metadata":{},"sourceType":"script"}