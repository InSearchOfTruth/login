{"ast":null,"code":"(function (root, factory) {\n  if (typeof exports === 'object') {\n    // CommonJS\n    factory(exports, module);\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['exports', 'module'], factory);\n  }\n})(this, function (exports, module) {\n  /**\n   * `Factory` constructor.\n   *\n   * @api public\n   */\n  function Factory() {\n    this._mechs = [];\n  }\n  /**\n   * Utilize the given `mech` with optional `name`, overridding the mechanism's\n   * default name.\n   *\n   * Examples:\n   *\n   *     factory.use(FooMechanism);\n   *\n   *     factory.use('XFOO', FooMechanism);\n   *\n   * @param {String|Mechanism} name\n   * @param {Mechanism} mech\n   * @return {Factory} for chaining\n   * @api public\n   */\n\n\n  Factory.prototype.use = function (name, mech) {\n    if (!mech) {\n      mech = name;\n      name = mech.prototype.name;\n    }\n\n    this._mechs.push({\n      name: name,\n      mech: mech\n    });\n\n    return this;\n  };\n  /**\n   * Create a new mechanism from supported list of `mechs`.\n   *\n   * If no mechanisms are supported, returns `null`.\n   *\n   * Examples:\n   *\n   *     var mech = factory.create(['FOO', 'BAR']);\n   *\n   * @param {Array} mechs\n   * @return {Mechanism}\n   * @api public\n   */\n\n\n  Factory.prototype.create = function (mechs) {\n    for (var i = 0, len = this._mechs.length; i < len; i++) {\n      for (var j = 0, jlen = mechs.length; j < jlen; j++) {\n        var entry = this._mechs[i];\n\n        if (entry.name == mechs[j]) {\n          return new entry.mech();\n        }\n      }\n    }\n\n    return null;\n  };\n\n  exports = module.exports = Factory;\n});","map":null,"metadata":{},"sourceType":"script"}