{"ast":null,"code":"var Utils = require('./cubeInternalUtils'),\n    config = require('./cubeConfig');\n\nfunction AddressBook(service) {\n  this.service = service;\n}\n\nAddressBook.prototype = {\n  /**\n   * The method is used to create, update and delete contacts in address book.<br />\n   * If contact doesn't exist in address book then it will be created. If contacts exists then it will be updated.\n   * If pass 'destroy: 1' then the contact will be removed.<br />\n   * The method accepts 2 or 3 parameters.\n   * @memberof CB.addressbook\n   * @param {Object[]} list - A list of contacts to create / update / delete.\n   * @param {Object} [options]\n   * @param {string} [options.udid] - User's device identifier. If specified all operations will be in this context. Max length 64 symbols.\n   * If not - it means a user has one global address book across all his devices.\n   * @param {number} [options.force] - Defines force rewrite mode.\n   * If set 1 then all previous contacts for device context will be replaced by new ones.\n   * @param {Function} callback - The savedAddressBookCallback function\n   */\n  uploadAddressBook: function uploadAddressBook(list, optionsOrcallback, callback) {\n    if (!Utils.isArray(list)) {\n      new Error('First parameter must be an Array.');\n      return;\n    }\n\n    var opts, cb;\n\n    if (Utils.isFunction(optionsOrcallback)) {\n      cb = optionsOrcallback;\n    } else {\n      opts = optionsOrcallback;\n      cb = callback;\n    }\n\n    var data = {\n      contacts: list\n    };\n\n    if (opts) {\n      if (opts.force) {\n        data.force = opts.force;\n      }\n\n      if (opts.udid) {\n        data.udid = opts.udid;\n      }\n    }\n\n    var ajaxParams = {\n      type: 'POST',\n      url: Utils.getUrl(config.urls.addressbook),\n      data: data,\n      contentType: 'application/json; charset=utf-8',\n      isNeedStringify: true\n    };\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        cb(err, null);\n      } else {\n        cb(null, res);\n      }\n    });\n  },\n\n  /**\n   * Retrive all contacts from address book.\n   * The method accepts 1 or 2 parameters.\n   * @memberof CB.addressbook\n   * @param {string|function} udidOrCallback - You could pass udid of address book or\n   * callback function if you want to get contacts from global address book.\n   * @param {function} [callback] - Callback function is used as 2nd parameter if you pass udid as 1st parameters.\n   * This callback takes 2 arguments: an error and a response.\n   */\n  get: function get(udidOrCallback, callback) {\n    var udid, cb;\n\n    if (Utils.isFunction(udidOrCallback)) {\n      cb = udidOrCallback;\n    } else {\n      udid = udidOrCallback;\n      cb = callback;\n    }\n\n    if (!Utils.isFunction(cb)) {\n      throw new Error('A callback function is required.');\n    }\n\n    var ajaxParams = {\n      type: 'GET',\n      url: Utils.getUrl(config.urls.addressbook),\n      contentType: 'application/json; charset=utf-8',\n      isNeedStringify: true\n    };\n\n    if (udid) {\n      ajaxParams.data = {\n        udid: udid\n      };\n    }\n\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        var isFakeErrorEmptyAddressBook = _isFakeErrorEmptyAddressBook(err);\n\n        if (isFakeErrorEmptyAddressBook) {\n          cb(null, []);\n        } else {\n          cb(err, null);\n        }\n      } else {\n        cb(null, res);\n      }\n    });\n  },\n\n  /**\n   * Retrieve users that have phone numbers from your address book.\n   * The methods accepts 1 or 2 parameters.\n   * @memberof CB.addressbook\n   * @param {boolean|function} udidOrCallback - You can pass isCompact parameter or callback object. If isCompact is passed then only user's id and phone fields will be returned from server. Otherwise - all standard user's fields will be returned.\n   * @param {function} [callback] - Callback function is use–≤ as 2nd parameter if you pass `isCompact` as 1st parameter.\n   * This callback takes 2 arguments: an error and a response.\n   */\n  getRegisteredUsers: function getRegisteredUsers(isCompactOrCallback, callback) {\n    var isCompact, cb;\n\n    if (Utils.isFunction(isCompactOrCallback)) {\n      cb = isCompactOrCallback;\n    } else {\n      isCompact = isCompactOrCallback;\n      cb = callback;\n    }\n\n    if (!Utils.isFunction(cb)) {\n      throw new Error('A callback function is required.');\n    }\n\n    var ajaxParams = {\n      type: 'GET',\n      url: Utils.getUrl(config.urls.addressbookRegistered),\n      contentType: 'application/json; charset=utf-8'\n    };\n\n    if (isCompact) {\n      ajaxParams.data = {\n        compact: 1\n      };\n    }\n\n    this.service.ajax(ajaxParams, function (err, res) {\n      if (err) {\n        var isFakeErrorEmptyAddressBook = _isFakeErrorEmptyAddressBook(err);\n\n        if (isFakeErrorEmptyAddressBook) {\n          cb(null, []);\n        } else {\n          cb(err, null);\n        }\n      } else {\n        cb(null, res);\n      }\n    });\n  }\n};\nmodule.exports = AddressBook; // Emulates normal response from the REST API server\n\nfunction _isFakeErrorEmptyAddressBook(err) {\n  var errDetails = err.detail ? err.detail : err.message.errors;\n  return err.code === 404 && errDetails[0] === 'Empty address book';\n}","map":null,"metadata":{},"sourceType":"script"}